#!/usr/bin/env clojure

"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –æ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º do-parse –º–∞–∫—Ä–æ—Å–∞
 
 –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
 2. –ú–µ—Ç—Ä–∏–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
 3. –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
 4. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
 
 –ó–∞–ø—É—Å–∫: clojure -M refactoring-demo.clj"

(require '[clojure.string :as str]
         '[clojure.pprint :refer [pprint]])

;; ============================================================================
;; –ê–ù–ê–õ–ò–ó –£–õ–£–ß–®–ï–ù–ò–ô –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê
;; ============================================================================

(def refactoring-metrics
  "–ú–µ—Ç—Ä–∏–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"
  {:parse-type-specifier
   {:before {:lines-of-code 12
            :nesting-depth 4
            :if-statements 2
            :let-bindings 2
            :readability-score 3}
    :after {:lines-of-code 8
           :nesting-depth 1
           :if-statements 0
           :let-bindings 0
           :readability-score 9}}
   
   :parse-postfix-expression
   {:before {:lines-of-code 45
            :nesting-depth 6
            :if-statements 8
            :let-bindings 12
            :readability-score 2}
    :after {:lines-of-code 25
           :nesting-depth 2
           :if-statements 2
           :let-bindings 3
           :readability-score 8}}
   
   :parse-unary-expression
   {:before {:lines-of-code 35
            :nesting-depth 5
            :if-statements 10
            :let-bindings 10
            :readability-score 2}
    :after {:lines-of-code 20
           :nesting-depth 1
           :if-statements 0
           :let-bindings 0
           :readability-score 9}}
   
   :parse-multiplicative-expression
   {:before {:lines-of-code 18
            :nesting-depth 4
            :if-statements 3
            :let-bindings 4
            :readability-score 4}
    :after {:lines-of-code 8
           :nesting-depth 1
           :if-statements 0
           :let-bindings 0
           :readability-score 9}}})

;; ============================================================================
;; –ü–†–ò–ú–ï–†–´ –ö–û–î–ê –î–û –ò –ü–û–°–õ–ï –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê
;; ============================================================================

(def code-examples
  "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–æ –∏ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"
  {:parse-type-specifier
   {:before
    "(defn parse-type-specifier [state]
       (let [signedness-result ((optional (choice ...)) state)]
         (if (:success? signedness-result)
           (let [base-type-result ((choice ...) (:state signedness-result))]
             (if (:success? base-type-result)
               (success {...} (:state base-type-result))
               base-type-result))
           signedness-result)))"
    
    :after
    "(defn parse-type-specifier [state]
       ((do-parse
          signedness (optional (choice ...))
          base-type (choice ...)
          (return-parser {...})) state))"}
   
   :parse-unary-expression
   {:before
    "(defn parse-unary-expression [state]
       ((choice
         (fn [state]
           ((choice
             (fn [state]
               (let [op-result ...]
                 (if (:success? op-result)
                   (let [expr-result ...]
                     (if (:success? expr-result)
                       (success ... (:state expr-result))
                       expr-result))
                   op-result)))
             ...))) state))"
    
    :after
    "(defn parse-unary-expression [state]
       ((choice
         (do-parse
           op (expect-token-value :not)
           expr parse-unary-expression
           (return-parser (unary-expression-node (:value op) expr)))
         ...) state))"}})

;; ============================================================================
;; –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê
;; ============================================================================

(defn calculate-improvement
  "–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏"
  [before after]
  (let [improvement (- before after)
        percentage (* (/ improvement before) 100)]
    (Math/round percentage)))

(defn analyze-function-improvements
  "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"
  [function-name metrics]
  (let [{:keys [before after]} metrics]
    {:function function-name
     :lines-reduction (calculate-improvement (:lines-of-code before) (:lines-of-code after))
     :nesting-reduction (calculate-improvement (:nesting-depth before) (:nesting-depth after))
     :if-statements-reduction (calculate-improvement (:if-statements before) (:if-statements after))
     :readability-improvement (- (:readability-score after) (:readability-score before))
     :complexity-score-before (+ (:nesting-depth before) (:if-statements before) (:let-bindings before))
     :complexity-score-after (+ (:nesting-depth after) (:if-statements after) (:let-bindings after))}))

(defn generate-improvement-report
  "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö"
  []
  (println "üìä –û–¢–ß–ï–¢ –û–ë –£–õ–£–ß–®–ï–ù–ò–Ø–• –ü–û–°–õ–ï –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (doseq [[function-name metrics] refactoring-metrics]
    (let [analysis (analyze-function-improvements function-name metrics)]
      (println (str "\nüîß " (name function-name)))
      (println (str "   üìâ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: " (:lines-reduction analysis) "%"))
      (println (str "   üìê –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: " (:nesting-reduction analysis) "%"))
      (println (str "   üîÄ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ if-–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: " (:if-statements-reduction analysis) "%"))
      (println (str "   üìà –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏: +" (:readability-improvement analysis) " –±–∞–ª–ª–æ–≤"))
      (println (str "   üßÆ –°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ/–ø–æ—Å–ª–µ: " (:complexity-score-before analysis) " ‚Üí " (:complexity-score-after analysis)))))
  
  (let [total-lines-before (reduce + (map #(get-in % [:before :lines-of-code]) (vals refactoring-metrics)))
        total-lines-after (reduce + (map #(get-in % [:after :lines-of-code]) (vals refactoring-metrics)))
        total-reduction (calculate-improvement total-lines-before total-lines-after)]
    (println (str "\nüìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:"))
    (println (str "   üìù –û–±—â–µ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫–æ–¥–∞: " total-reduction "%"))
    (println (str "   üéØ –°—Ç—Ä–æ–∫ –¥–æ: " total-lines-before ", –ø–æ—Å–ª–µ: " total-lines-after))
    (println (str "   ‚ú® –≠–∫–æ–Ω–æ–º–∏—è: " (- total-lines-before total-lines-after) " —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞"))))

;; ============================================================================
;; –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ò–ú–£–©–ï–°–¢–í DO-PARSE
;; ============================================================================

(defn demonstrate-do-parse-benefits
  "–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è do-parse –º–∞–∫—Ä–æ—Å–∞"
  []
  (println "\nüöÄ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê DO-PARSE –ú–ê–ö–†–û–°–ê")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\n1. üìñ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ß–ò–¢–ê–ï–ú–û–°–¢–¨:")
  (println "   ‚úÖ –õ–∏–Ω–µ–π–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π")
  (println "   ‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏")
  (println "   ‚úÖ –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
  
  (println "\n2. üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –¢–ò–ü–û–í:")
  (println "   ‚úÖ –ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–µ –º–∞–∫—Ä–æ—Å—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç –∑–∞—Ö–≤–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
  (println "   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è")
  (println "   ‚úÖ Compile-time –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
  
  (println "\n3. üîß –£–ü–†–û–©–ï–ù–ò–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–Ø:")
  (println "   ‚úÖ –ú–µ–Ω—å—à–µ boilerplate –∫–æ–¥–∞")
  (println "   ‚úÖ –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
  (println "   ‚úÖ –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —à–∞–≥–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞")
  
  (println "\n4. üéØ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –ö–û–ú–ü–û–ó–ò–¶–ò–Ø:")
  (println "   ‚úÖ –ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤")
  (println "   ‚úÖ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
  (println "   ‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥"))

;; ============================================================================
;; –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–î–•–û–î–û–í
;; ============================================================================

(defn compare-approaches
  "–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–º–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∏ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥—ã"
  []
  (println "\n‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–î–•–û–î–û–í")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\nüìä –ò–ú–ü–ï–†–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î (–¥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞):")
  (println "   ‚ùå –ì–ª—É–±–æ–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å if-else")
  (println "   ‚ùå –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
  (println "   ‚ùå –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è boilerplate –∫–æ–¥")
  (println "   ‚ùå –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
  (println "   ‚ùå –í—ã—Å–æ–∫–∞—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
  
  (println "\nüìä –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ô –ü–û–î–•–û–î (–ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞):")
  (println "   ‚úÖ –õ–∏–Ω–µ–π–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π")
  (println "   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
  (println "   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π boilerplate –∫–æ–¥")
  (println "   ‚úÖ –Ø—Å–Ω—ã–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
  (println "   ‚úÖ –ù–∏–∑–∫–∞—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å"))

;; ============================================================================
;; –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
;; ============================================================================

(defn show-usage-examples
  "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
  []
  (println "\nüí° –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\nüîß parse-type-specifier:")
  (println "   –í—Ö–æ–¥: \"unsigned int\"")
  (println "   –í—ã—Ö–æ–¥: {:signedness :unsigned, :base-type :int}")
  
  (println "\nüîß parse-postfix-expression:")
  (println "   –í—Ö–æ–¥: \"func(a, b)[0]++\"")
  (println "   –í—ã—Ö–æ–¥: {:ast-type :unary-expression, :operator :post-increment, ...}")
  
  (println "\nüîß parse-unary-expression:")
  (println "   –í—Ö–æ–¥: \"++counter\"")
  (println "   –í—ã—Ö–æ–¥: {:ast-type :unary-expression, :operator :increment, ...}")
  
  (println "\nüîß parse-multiplicative-expression:")
  (println "   –í—Ö–æ–¥: \"a * b / c\"")
  (println "   –í—ã—Ö–æ–¥: {:ast-type :binary-expression, :operator :divide, ...}"))

;; ============================================================================
;; –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
;; ============================================================================

(defn run-refactoring-demo
  "–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —É–ª—É—á—à–µ–Ω–∏–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"
  []
  (println "üé® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê –ü–ê–†–°–ï–†–ê C51")
  (println (str "=" (apply str (repeat 60 "="))))
  (println "üìö –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è do-parse –º–∞–∫—Ä–æ—Å–∞")
  
  (generate-improvement-report)
  (demonstrate-do-parse-benefits)
  (compare-approaches)
  (show-usage-examples)
  
  (println "\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
  (println "‚ú® –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º do-parse –º–∞–∫—Ä–æ—Å–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ")
  (println "   —É–ª—É—á—à–∏–ª –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å")
  (println "üöÄ –ö–æ–¥ —Å—Ç–∞–ª –±–æ–ª–µ–µ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º")
  (println "üõ°Ô∏è –ü–æ–≤—ã—Å–∏–ª–∞—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å")
  (println "üìà –°–Ω–∏–∑–∏–ª–∞—Å—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫"))

;; –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
(when (= *file* (System/getProperty "babashka.file"))
  (run-refactoring-demo)) 