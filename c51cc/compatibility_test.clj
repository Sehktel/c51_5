(require '[c51cc.preprocessor :as pp])
(require '[c51cc.preprocessor-v2 :as pp2])
(require '[clojure.string :as str])

(println "üîÑ === –¢–ï–°–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê ===")

;; ============================================================================
;; –¢–ï–°–¢–ò–†–£–ï–ú –û–ë–†–ê–¢–ù–£–Æ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –°–¢–ê–†–û–ì–û API
;; ============================================================================

(defn test-compatibility [test-name old-code new-code expected-result]
  (println (str "\nüß™ " test-name))
  (try
    ;; –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π API (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ wrapper)
    (let [old-result (pp/preprocess old-code)
          new-result (pp2/preprocess-v2 new-code)
          new-result-string (:result new-result)]
      
      (println "–°—Ç–∞—Ä—ã–π API —Ä–µ–∑—É–ª—å—Ç–∞—Ç:" (pr-str old-result))
      (println "–ù–æ–≤—ã–π API —Ä–µ–∑—É–ª—å—Ç–∞—Ç:" (pr-str new-result-string))
      (println "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:" (pr-str expected-result))
      
      (let [old-matches (= old-result expected-result)
            new-matches (= new-result-string expected-result)
            compatible (= old-result new-result-string)]
        
        (println "–°—Ç–∞—Ä—ã–π API –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:" old-matches)
        (println "–ù–æ–≤—ã–π API –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:" new-matches)
        (println "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:" compatible)
        
        (if (and old-matches new-matches compatible)
          (println "‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
          (println "‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù"))
        
        (and old-matches new-matches compatible)))
    
    (catch Exception e
      (println "‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï:" (.getMessage e))
      false)))

;; ============================================================================
;; –ù–ê–ë–û–† –¢–ï–°–¢–û–í –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
;; ============================================================================

(def compatibility-tests [
  ["–ü—Ä–æ—Å—Ç—ã–µ –º–∞–∫—Ä–æ—Å—ã"
   "#define MAX 100\nint x = MAX;"
   "#define MAX 100\nint x = MAX;"
   "int x = 100;"]
  
  ["–£—Å–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è"
   "#define DEBUG\n#ifdef DEBUG\nint debug = 1;\n#endif"
   "#define DEBUG\n#ifdef DEBUG\nint debug = 1;\n#endif"
   "int debug = 1;"]
  
  ["–ú–∞–∫—Ä–æ—Å—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"
   "#define SQUARE(x) ((x) * (x))\nint result = SQUARE(5);"
   "#define SQUARE(x) ((x) * (x))\nint result = SQUARE(5);"
   "int result = ((5) * (5));"]
])

;; –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è include
(spit "compat_test.h" "#define COMPAT_VALUE 42")

(def include-test
  ["Include –¥–∏—Ä–µ–∫—Ç–∏–≤—ã"
   "#include \"compat_test.h\"\nint x = COMPAT_VALUE;"
   "#include \"compat_test.h\"\nint x = COMPAT_VALUE;"
   "int x = 42;"])

;; –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
(println "\nüìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")

(def results 
  (concat 
    (for [[name old-code new-code expected] compatibility-tests]
      (test-compatibility name old-code new-code expected))
    [(test-compatibility 
       (first include-test) 
       (second include-test) 
       (nth include-test 2) 
       (nth include-test 3))]))

;; ============================================================================
;; –¢–ï–°–¢–ò–†–£–ï–ú –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò (–¢–û–õ–¨–ö–û –í V2)
;; ============================================================================

(println "\nüÜï === –¢–ï–°–¢ –ù–û–í–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô V2 ===")

(defn test-v2-features []
  (println "\nüß™ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
  (let [result (pp2/preprocess-v2 "#include \"missing.h\"\nint x = 1;" {:include-paths ["."]})]
    (println "–£—Å–ø–µ—Ö:" (:success result))
    (println "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫:" (count (:errors result)))
    (println "–ü–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞:" (:message (first (:errors result))))
    (println "‚úÖ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç"))
  
  (println "\nüß™ –í–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω–∏—è")
  (spit "v2_inner.h" "#define INNER_VAL 123")
  (spit "v2_outer.h" "#include \"v2_inner.h\"\n#define OUTER_VAL INNER_VAL")
  (let [result (pp2/preprocess-v2 "#include \"v2_outer.h\"\nint x = OUTER_VAL;" {:include-paths ["."]})]
    (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" (:result result))
    (println "–£—Å–ø–µ—Ö:" (:success result))
    (println "‚úÖ –í–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")))

(test-v2-features)

;; ============================================================================
;; –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
;; ============================================================================

(println "\nüìä === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===")
(println "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:" (count results))
(println "–ü—Ä–æ–π–¥–µ–Ω–æ:" (count (filter true? results)))
(println "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:" (count (filter false? results)))

(if (every? true? results)
  (do
    (println "\nüéâ –í–°–ï –¢–ï–°–¢–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
    (println "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ë–ï–°–®–û–í–ù–´–ú!")
    (println "‚úÖ –°—Ç–∞—Ä—ã–π –∫–æ–¥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
    (println "‚úÖ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ preprocess-v2!"))
  (do
    (println "\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò!")
    (println "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —Å–ª–∏—è–Ω–∏–µ–º!")))

(println "\nüîß === –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ú–ò–ì–†–ê–¶–ò–ò ===")
(println "1. –°—Ç–∞—Ä—ã–π –∫–æ–¥: (preprocess code options) ‚Üí String")
(println "2. –ù–æ–≤—ã–π –∫–æ–¥: (preprocess-v2 code options) ‚Üí {:result String, :errors [], :success Boolean}")
(println "3. –î–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: –∑–∞–º–µ–Ω–∏—Ç–µ preprocess –Ω–∞ preprocess-v2 –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ map —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
(println "4. Wrapper –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å!") 