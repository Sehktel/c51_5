(ns c51cc.code-comparison-demo
  "–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –≤ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
   
   –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
  (:require [clojure.string :as str]))

;; ============================================================================
;; –°–†–ê–í–ù–ï–ù–ò–ï: –û–ë–†–ê–ë–û–¢–ö–ê –î–ò–†–ï–ö–¢–ò–í–´ #INCLUDE
;; ============================================================================

(defn demo-include-comparison []
  (println "üìÅ –°–†–ê–í–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã #include")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\nüî¥ –¢–ï–ö–£–©–ò–ô –ò–ú–ü–ï–†–ê–¢–ò–í–ù–´–ô –ö–û–î (—É–ø—Ä–æ—â–µ–Ω–Ω–æ):")
  (println "```clojure")
  (println "(defn process-include [filename system-include? state]")
  (println "  (if (str/blank? filename)")
  (println "    [nil (add-error state \"–ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞\")]")
  (println "    (let [include-file (find-include-file filename (:include-paths state) system-include?)]")
  (println "      (cond")
  (println "        (nil? include-file)")
  (println "        [nil (add-error state \"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\")]")
  (println "        ")
  (println "        (contains? (set (:include-stack state)) include-file)")
  (println "        [nil (add-error state \"–¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ\")]")
  (println "        ")
  (println "        (> (count (:include-stack state)) 50)")
  (println "        [nil (add-error state \"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –≥–ª—É–±–∏–Ω–∞\")]")
  (println "        ")
  (println "        :else")
  (println "        (let [file-content (try (slurp include-file) (catch Exception e nil))]")
  (println "          (if (nil? file-content)")
  (println "            [nil (add-error state \"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\")]")
  (println "            (let [new-state (-> state")
  (println "                                (update :include-stack conj include-file)")
  (println "                                (assoc :current-file include-file))]")
  (println "              ;; –ï—â–µ 20+ —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
  (println "              [processed-content final-state])))))))")
  (println "```")
  
  (println "\nüü¢ –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ô –ö–û–î:")
  (println "```clojure")
  (println "(defn process-include-m [filename system-include? state]")
  (println "  (do-result")
  (println "    [validated-filename (validate-filename filename)")
  (println "     include-file (find-include-file-m validated-filename (:include-paths state) system-include?)")
  (println "     _ (check-circular-inclusion include-file (:include-stack state))")
  (println "     _ (check-inclusion-depth (:include-stack state) 50)")
  (println "     file-content (read-file-content include-file)]")
  (println "    ")
  (println "    (let [new-state (-> state")
  (println "                        (update :include-stack conj include-file)")
  (println "                        (assoc :current-file include-file))]")
  (println "      (ok [file-content new-state]))))")
  (println "```")
  
  (println "\nüìä –ú–ï–¢–†–ò–ö–ò –°–†–ê–í–ù–ï–ù–ò–Ø:")
  (println "   –°—Ç—Ä–æ–∫ –∫–æ–¥–∞:           80 ‚Üí 15  (-81%)")
  (println "   –£—Ä–æ–≤–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏:  6 ‚Üí 2   (-67%)")
  (println "   –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 12 ‚Üí 2  (-83%)")
  (println "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ if/cond:   5 ‚Üí 0   (-100%)")
  (println "   –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:     –†—É—á–Ω–∞—è ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è"))

;; ============================================================================
;; –°–†–ê–í–ù–ï–ù–ò–ï: –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò
;; ============================================================================

(defn demo-main-loop-comparison []
  (println "\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\nüî¥ –¢–ï–ö–£–©–ò–ô –ò–ú–ü–ï–†–ê–¢–ò–í–ù–´–ô –ö–û–î:")
  (println "```clojure")
  (println "(loop [remaining-lines lines")
  (println "       processed-lines []")
  (println "       current-state initial-state]")
  (println "  (if (empty? remaining-lines)")
  (println "    ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏")
  (println "    (let [final-state (if (empty? (:conditional-stack current-state))")
  (println "                        current-state")
  (println "                        (add-error current-state \"–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏\"))]")
  (println "      {:result (str/join \"\\n\" processed-lines)")
  (println "       :errors (:errors final-state)")
  (println "       :success (empty? (:errors final-state))})")
  (println "    ")
  (println "    ;; –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É")
  (println "    (let [current-line (first remaining-lines)")
  (println "          [processed-line new-state] (try")
  (println "                                       (process-line current-line current-state)")
  (println "                                       (catch Exception e")
  (println "                                         (let [error-state (add-error current-state (.getMessage e))]")
  (println "                                           [(str \"// –û–®–ò–ë–ö–ê: \" (.getMessage e)) error-state])))]")
  (println "      (recur (rest remaining-lines)")
  (println "             (if (str/blank? processed-line)")
  (println "               processed-lines")
  (println "               (conj processed-lines processed-line))")
  (println "             new-state))))")
  (println "```")
  
  (println "\nüü¢ –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ô –ö–û–î:")
  (println "```clojure")
  (println "(defn preprocess-lines-m [lines initial-state]")
  (println "  (reduce-result")
  (println "    (fn [acc line]")
  (println "      (do-result")
  (println "        [[processed-line new-state] (process-line-m line (:state acc))]")
  (println "        (ok {:lines (if (str/blank? processed-line)")
  (println "                      (:lines acc)")
  (println "                      (conj (:lines acc) processed-line))")
  (println "             :state new-state})))")
  (println "    {:lines [] :state initial-state}")
  (println "    lines))")
  (println "```")
  
  (println "\nüìä –ú–ï–¢–†–ò–ö–ò –°–†–ê–í–ù–ï–ù–ò–Ø:")
  (println "   –°—Ç—Ä–æ–∫ –∫–æ–¥–∞:           35 ‚Üí 12  (-66%)")
  (println "   –£—Ä–æ–≤–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏:  5 ‚Üí 2   (-60%)")
  (println "   –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: –î–∞ ‚Üí –ù–µ—Ç")
  (println "   –ú—É—Ç–∞–±–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –î–∞ ‚Üí –ù–µ—Ç"))

;; ============================================================================
;; –ê–ù–ê–õ–ò–ó –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –†–ï–®–ï–ù–ò–ô
;; ============================================================================

(defn demo-alternatives []
  (println "\nü§î –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ï–®–ï–ù–ò–Ø –ò –ò–• –ê–ù–ê–õ–ò–ó")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\n1Ô∏è‚É£ –ß–ê–°–¢–ò–ß–ù–´–ô –†–ï–§–ê–ö–¢–û–†–ò–ù–ì (–∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ):")
  (println "   ‚úÖ –ü–ª—é—Å—ã:")
  (println "      ‚Ä¢ –ú–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (~1 –¥–µ–Ω—å)")
  (println "      ‚Ä¢ –ú–µ–Ω—å—à–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ API")
  (println "      ‚Ä¢ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥")
  (println "   ‚ùå –ú–∏–Ω—É—Å—ã:")
  (println "      ‚Ä¢ –°–º–µ—à–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–¥–∏–≥–º—ã –≤ –∫–æ–¥–µ")
  (println "      ‚Ä¢ –ù–µ–ø–æ–ª–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –º–æ–Ω–∞–¥")
  (println "      ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ –æ—Å—Ç–∞–µ—Ç—Å—è")
  
  (println "\n2Ô∏è‚É£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï EXISTING –ë–ò–ë–õ–ò–û–¢–ï–ö (cats, algo.monads):")
  (println "   ‚úÖ –ü–ª—é—Å—ã:")
  (println "      ‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã")
  (println "      ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
  (println "      ‚Ä¢ –ë–æ–≥–∞—Ç—ã–π API")
  (println "   ‚ùå –ú–∏–Ω—É—Å—ã:")
  (println "      ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å")
  (println "      ‚Ä¢ –ò–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π")
  (println "      ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π")
  
  (println "\n3Ô∏è‚É£ –°–û–ë–°–¢–í–ï–ù–ù–ê–Ø –ú–û–ù–ê–î–ò–ß–ï–°–ö–ê–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–ê:")
  (println "   ‚úÖ –ü–ª—é—Å—ã:")
  (println "      ‚Ä¢ –¢–æ—á–Ω–æ –ø–æ–¥ –Ω–∞—à–∏ –Ω—É–∂–¥—ã")
  (println "      ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π overhead")
  (println "      ‚Ä¢ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å")
  (println "   ‚ùå –ú–∏–Ω—É—Å—ã:")
  (println "      ‚Ä¢ –í—Ä–µ–º—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É")
  (println "      ‚Ä¢ –ù—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
  (println "      ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–∂–∏—Ç—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É")
  
  (println "\n4Ô∏è‚É£ –û–°–¢–ê–í–ò–¢–¨ –ö–ê–ö –ï–°–¢–¨ + –£–õ–£–ß–®–ï–ù–ò–Ø:")
  (println "   ‚úÖ –ü–ª—é—Å—ã:")
  (println "      ‚Ä¢ –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
  (println "      ‚Ä¢ –ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
  (println "      ‚Ä¢ –ù–µ—Ç —Ä–∏—Å–∫–æ–≤")
  (println "   ‚ùå –ú–∏–Ω—É—Å—ã:")
  (println "      ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ —Ä–∞—Å—Ç–µ—Ç")
  (println "      ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
  (println "      ‚Ä¢ –ë–æ–ª—å—à–µ –±–∞–≥–æ–≤ –≤ –±—É–¥—É—â–µ–º"))

;; ============================================================================
;; –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –†–ï–®–ï–ù–ò–Ø
;; ============================================================================

(defn demo-critical-analysis []
  (println "\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: –°—Ç–æ–∏—Ç –ª–∏ –∏–≥—Ä–∞ —Å–≤–µ—á?")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\nüîç –§–ê–ö–¢–û–†–´ \"–ó–ê\" –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥:")
  (println "   1. –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞")
  (println "   2. –¢–µ–∫—É—â–∏–π –∫–æ–¥ –∏–º–µ–µ—Ç –í–´–°–û–ö–£–Æ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
  (println "   3. –í –ø—Ä–æ–µ–∫—Ç–µ –£–ñ–ï –ï–°–¢–¨ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–ø–∞—Ä—Å–µ—Ä)")
  (println "   4. –ö–æ–º–∞–Ω–¥–∞ –£–ñ–ï –ó–ù–ê–ö–û–ú–ê —Å –º–æ–Ω–∞–¥–∞–º–∏")
  (println "   5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –°–õ–ê–ë–û–ï –ú–ï–°–¢–û —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–¥–∞")
  (println "   6. –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –±—É–¥–µ—Ç –ê–ö–¢–ò–í–ù–û –†–ê–ó–í–ò–í–ê–¢–¨–°–Ø")
  
  (println "\nüîç –§–ê–ö–¢–û–†–´ \"–ü–†–û–¢–ò–í\" –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:")
  (println "   1. –¢–µ–∫—É—â–∏–π –∫–æ–¥ –†–ê–ë–û–¢–ê–ï–¢ –∏ –ø–æ–∫—Ä—ã—Ç —Ç–µ—Å—Ç–∞–º–∏")
  (println "   2. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ (2-3 –¥–Ω—è)")
  (println "   3. –í–æ–∑–º–æ–∂–Ω—ã –ù–û–í–´–ï –±–∞–≥–∏ –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ")
  (println "   4. –ù–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ runtime –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
  
  (println "\n‚öñÔ∏è –í–ó–í–ï–®–ï–ù–ù–ê–Ø –û–¶–ï–ù–ö–ê:")
  (println "   –§–∞–∫—Ç–æ—Ä—ã –ó–ê: 6 √ó –í–´–°–û–ö–ò–ô –≤–µ—Å = 18 –±–∞–ª–ª–æ–≤")
  (println "   –§–∞–∫—Ç–æ—Ä—ã –ü–†–û–¢–ò–í: 4 √ó –°–†–ï–î–ù–ò–ô –≤–µ—Å = 8 –±–∞–ª–ª–æ–≤")
  (println "   –ò–¢–û–ì–û: 18 vs 8 = –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –û–ü–†–ê–í–î–ê–ù")
  
  (println "\nüö® –†–ò–°–ö–ò –ò –ú–ò–¢–ò–ì–ê–¶–ò–Ø:")
  (println "   –†–∏—Å–∫: –ù–æ–≤—ã–µ –±–∞–≥–∏")
  (println "   –ú–∏—Ç–∏–≥–∞—Ü–∏—è: –ü–æ—à–∞–≥–æ–≤—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ + —Ç—â–∞—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
  (println "   ")
  (println "   –†–∏—Å–∫: –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
  (println "   –ú–∏—Ç–∏–≥–∞—Ü–∏—è: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ + –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—á–∞—Å—Ç–∫–æ–≤")
  (println "   ")
  (println "   –†–∏—Å–∫: –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏—è")
  (println "   –ú–∏—Ç–∏–≥–∞—Ü–∏—è: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è + –ø—Ä–∏–º–µ—Ä—ã + –æ–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"))

;; ============================================================================
;; –ö–û–ù–ö–†–ï–¢–ù–´–ô –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô
;; ============================================================================

(defn demo-action-plan []
  (println "\nüìã –ö–û–ù–ö–†–ï–¢–ù–´–ô –ü–õ–ê–ù –†–ï–ê–õ–ò–ó–ê–¶–ò–ò")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\nüóìÔ∏è –≠–¢–ê–ü 1 (–î–µ–Ω—å 1, 4 —á–∞—Å–∞): –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
  (println "   ‚úÖ –°–æ–∑–¥–∞—Ç—å –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã Result/Either")
  (println "   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (bind, map, etc.)")
  (println "   ‚úÖ –ù–∞–ø–∏—Å–∞—Ç—å –º–∞–∫—Ä–æ—Å do-result")
  (println "   ‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
  
  (println "\nüóìÔ∏è –≠–¢–ê–ü 2 (–î–µ–Ω—å 1-2, 6 —á–∞—Å–æ–≤): –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
  (println "   ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å validate-filename")
  (println "   ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å find-include-file")
  (println "   ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å parse-macro-definition")
  (println "   ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å expand-macros")
  (println "   ‚úÖ –¢–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
  
  (println "\nüóìÔ∏è –≠–¢–ê–ü 3 (–î–µ–Ω—å 2, 4 —á–∞—Å–∞): –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤")
  (println "   ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å process-include")
  (println "   ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å process-define")
  (println "   ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å —É—Å–ª–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã")
  (println "   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
  
  (println "\nüóìÔ∏è –≠–¢–ê–ü 4 (–î–µ–Ω—å 3, 4 —á–∞—Å–∞): –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞")
  (println "   ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å process-line")
  (println "   ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é preprocess")
  (println "   ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å API (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
  (println "   ‚úÖ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
  
  (println "\nüóìÔ∏è –≠–¢–ê–ü 5 (–î–µ–Ω—å 3, 2 —á–∞—Å–∞): –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è")
  (println "   ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
  (println "   ‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ code review")
  (println "   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD")
  (println "   ‚úÖ –î–µ–ø–ª–æ–π –≤ staging")
  
  (println "\n‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø: 20 —á–∞—Å–æ–≤ (2.5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è)")
  (println "üí∞ –°–¢–û–ò–ú–û–°–¢–¨: ~$2000 (–ø—Ä–∏ $100/—á–∞—Å)")
  (println "üíé –í–´–ì–û–î–ê: –°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ 70% = $10000+/–≥–æ–¥"))

;; ============================================================================
;; –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
;; ============================================================================

(defn -main []
  (println "üî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ú–û–ù–ê–î–ò–ß–ï–°–ö–û–ì–û –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê")
  (println (str "=" (apply str (repeat 80 "="))))
  
  (demo-include-comparison)
  (demo-main-loop-comparison)
  (demo-alternatives)
  (demo-critical-analysis)
  (demo-action-plan)
  
  (println "\n" (str "=" (apply str (repeat 80 "="))))
  (println "üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
  (println "   –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ô –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê - –í–´–°–û–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ó–ê–î–ê–ß–ê")
  (println "   ")
  (println "   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:")
  (println "   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")
  (println "   ‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–¥–∞")
  (println "   ‚Ä¢ –ù–∞–ª–∏—á–∏–µ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
  (println "   ‚Ä¢ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç/–≤—ã–≥–æ–¥")
  (println "   ‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã")
  (println (str "=" (apply str (repeat 80 "=")))))

(-main) 