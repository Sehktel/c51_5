(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

;; –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ç–µ—Å—Ç–æ–≤
(defn parse-string 
  "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞"
  [input]
  (let [tokens (lexer/tokenize input)]
    (parser/parse tokens)))

(defn parse-successful? 
  "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω—ã–º"
  [result]
  (:success result))

(defn get-ast 
  "–ò–∑–≤–ª–µ–∫–∞–µ—Ç AST –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
  [result]
  (:ast result))

(println "üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PARSE-STRING")

(let [result (parse-string "int add(int a, int b) { return a + b; }")]
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (when (parse-successful? result)
    (let [ast (get-ast result)]
      (println (str "AST —Ç–∏–ø: " (:ast-type ast)))
      (println (str "–û–±—ä—è–≤–ª–µ–Ω–∏–π: " (count (:declarations ast))))
      (let [func-decl (first (:declarations ast))]
        (println (str "func-decl: " func-decl))
        (println (str "func-decl nil?: " (nil? func-decl)))
        (when func-decl
          (println (str "func-decl —Ç–∏–ø: " (:ast-type func-decl)))
          (println (str "func-decl –∫–ª—é—á–∏: " (keys func-decl)))))))) 