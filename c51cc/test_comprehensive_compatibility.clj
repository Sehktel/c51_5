(require '[c51cc.preprocessor :as pp])
(require '[c51cc.preprocessor-v2 :as pp2])
(require '[clojure.string :as str])

(println "üîÑ === –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===")

(defn test-compatibility [test-name code expected-contains]
  (println (str "\nüß™ " test-name))
  (try
    (let [old-result (pp/preprocess code)
          new-result (pp2/preprocess-v2 code)
          new-result-string (:result new-result)
          compatible? (= old-result new-result-string)
          contains-expected? (every? #(str/includes? old-result %) expected-contains)]
      
      (println "–°—Ç–∞—Ä—ã–π API:" (pr-str old-result))
      (println "–ù–æ–≤—ã–π API:" (pr-str new-result-string))
      (println "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:" compatible?)
      (println "–°–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ:" contains-expected?)
      
      (if (and compatible? contains-expected?)
        (do (println "‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù") true)
        (do (println "‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù") false)))
    
    (catch Exception e
      (println "‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï:" (.getMessage e))
      false)))

;; ============================================================================
;; –ù–ê–ë–û–† –¢–ï–°–¢–û–í
;; ============================================================================

(def test-results [
  ;; –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ –º–∞–∫—Ä–æ—Å—ã
  (test-compatibility 
    "–ü—Ä–æ—Å—Ç—ã–µ –º–∞–∫—Ä–æ—Å—ã"
    "#define MAX 100\n#define MIN 0\nint range = MAX - MIN;"
    ["100" "0" "range"])
  
  ;; –¢–µ—Å—Ç 2: –£—Å–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è
  (test-compatibility
    "–£—Å–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è #ifdef"
    "#define DEBUG\n#ifdef DEBUG\nint debug_mode = 1;\n#endif\nint x = 42;"
    ["debug_mode = 1" "x = 42"])
  
  ;; –¢–µ—Å—Ç 3: –£—Å–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è #ifndef
  (test-compatibility
    "–£—Å–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è #ifndef"
    "#ifndef RELEASE\nint debug_info = 1;\n#endif\nint main_var = 5;"
    ["debug_info = 1" "main_var = 5"])
  
  ;; –¢–µ—Å—Ç 4: –í–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
  (test-compatibility
    "–í–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
    "#define FEATURE_A\n#ifdef FEATURE_A\n#define SUB_FEATURE\n#ifdef SUB_FEATURE\nint nested = 1;\n#endif\n#endif"
    ["nested = 1"])
  
  ;; –¢–µ—Å—Ç 5: #undef
  (test-compatibility
    "–û—Ç–º–µ–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Ä–æ—Å–∞"
    "#define TEMP 50\nint a = TEMP;\n#undef TEMP\nint b = TEMP;"
    ["a = 50" "b = TEMP"])
  
  ;; –¢–µ—Å—Ç 6: –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã
  (test-compatibility
    "–ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã"
    "int line = __LINE__;\nchar* file = __FILE__;"
    ["line = " "file = "])
])

;; ============================================================================
;; –†–ï–ó–£–õ–¨–¢–ê–¢–´
;; ============================================================================

(let [passed (count (filter true? test-results))
      total (count test-results)
      success-rate (/ passed total)]
  
  (println (str "\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==="))
  (println (str "–ü—Ä–æ–π–¥–µ–Ω–æ: " passed "/" total " (" (int (* success-rate 100)) "%)"))
  
  (if (= success-rate 1.0)
    (do
      (println "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
      (println "‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!")
      (println "‚úÖ –°—Ç–∞—Ä—ã–π –∫–æ–¥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
      (println "‚úÖ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ preprocess-v2!"))
    (do
      (println "\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
      (println "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"))))

(println "\nüîß === –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ ===")
(println "1. –°—Ç–∞—Ä—ã–π API: (preprocess code options) ‚Üí String")
(println "2. –ù–æ–≤—ã–π API: (preprocess-v2 code options) ‚Üí {:result String, :errors [], :success Boolean}")
(println "3. Wrapper –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ü–û–õ–ù–£–Æ –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å!")
(println "4. –î–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å preprocess-v2")

(println "\n‚ú® === –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ù–û–í–û–ì–û API ===")
(println "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
(println "‚Ä¢ –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (transducers)")
(println "‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (protocols)")
(println "‚Ä¢ –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å")
(println "‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ clojure.spec") 