(ns c51cc.monadic-preprocessor-hygiene-analysis
  "–ê–Ω–∞–ª–∏–∑ –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–æ–π —á–∏—Å—Ç–æ—Ç—ã –¥–ª—è –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
   
   –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–†–û–ö–ò –∏–∑ do-parse:
   1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π gensym (symbol#) —Å–æ–∑–¥–∞–µ—Ç –†–ê–ó–ù–´–ï —Å–∏–º–≤–æ–ª—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
   2. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã —Å–æ–∑–¥–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã –∑–∞—Ö–≤–∞—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
   3. –ù—É–∂–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
   4. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"
  (:require [clojure.string :as str]))

;; ============================================================================
;; –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –ì–ò–ì–ò–ï–ù–´ –í –ú–û–ù–ê–î–ò–ß–ï–°–ö–û–ú –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ï
;; ============================================================================

(defn analyze-hygiene-problems []
  (println "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ì–ò–ì–ò–ï–ù–´ –í –ú–û–ù–ê–î–ò–ß–ï–°–ö–û–ú –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ï")
  (println (str "=" (apply str (repeat 70 "="))))
  
  (println "\nüìã –£–†–û–ö–ò –ò–ó do-parse:")
  (println "   1. ‚ùå symbol# —Å–æ–∑–¥–∞–µ—Ç –†–ê–ó–ù–´–ï —Å–∏–º–≤–æ–ª—ã: result# ‚â† result# (–≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö)")
  (println "   2. ‚ùå –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã = –∑–∞—Ö–≤–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
  (println "   3. ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ = runtime –æ—à–∏–±–∫–∏")
  (println "   4. ‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
  
  (println "\nüéØ –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –†–ò–°–ö–ò –¥–ª—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:")
  (println "   ‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: state, result, error, errors, value")
  (println "   ‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ: preprocessor-state, file-content, macro-def")
  (println "   ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ: filename, include-file, line-number")
  
  (println "\n‚ö†Ô∏è  –ü–û–°–õ–ï–î–°–¢–í–ò–Ø –ü–õ–û–•–û–ô –ì–ò–ì–ò–ï–ù–´:")
  (println "   ‚Ä¢ –ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")
  (println "   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ª–∞–¥–∫–∏ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–æ—á–µ–∫")
  (println "   ‚Ä¢ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–¥–æ–º")
  (println "   ‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –∫–æ–º–ø–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏"))

;; ============================================================================
;; –ü–†–û–ë–õ–ï–ú–ù–´–ô –ö–û–î (–∫–∞–∫ –ù–ï –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å)
;; ============================================================================

(defn show-problematic-code []
  (println "\nüî¥ –ü–†–û–ë–õ–ï–ú–ù–´–ô –ö–û–î (–∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ do-parse):")
  (println "```clojure")
  (println "(defmacro do-result-BAD [bindings & body]")
  (println "  (if (empty? bindings)")
  (println "    `(do ~@body)")
  (println "    (let [[binding expr & rest-bindings] bindings]")
  (println "      `(bind ~expr")
  (println "             (fn [~binding]")
  (println "               (do-result-BAD [~@rest-bindings] ~@body))))))")
  (println "```")
  
  (println "\n‚ùå –ü–†–û–ë–õ–ï–ú–´:")
  (println "   1. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –º–∞–∫—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏")
  (println "   2. –ù–µ—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞—Ö–≤–∞—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
  (println "   3. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
  (println "   4. –ú–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ result, state, error"))

;; ============================================================================
;; –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ì–ò–ì–ò–ï–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
;; ============================================================================

(defmacro do-result
  "–ì–ò–ì–ò–ï–ù–ò–ß–ï–°–ö–ò –ß–ò–°–¢–´–ô –º–∞–∫—Ä–æ—Å –¥–ª—è –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π Result/Either
   
   –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —è–≤–Ω—ã–µ gensym –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
   - –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   - –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –∑–∞—Ö–≤–∞—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
   - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã –º–∞–∫—Ä–æ—Å–∞
   
   –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
   (do-result
     [x (validate-input input)
      y (process-data x)
      z (save-result y)]
     (ok z))"
  [bindings & body]
  
  ;; –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  (when (odd? (count bindings))
    (throw (ex-info "do-result —Ç—Ä–µ–±—É–µ—Ç —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ bindings" 
                   {:bindings bindings
                    :count (count bindings)})))
  
  ;; –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  (let [forbidden-names #{'result 'error 'errors 'value 'state 'preprocessor-state 
                          'file-content 'macro-def 'filename 'include-file 
                          'line-number 'current-state 'new-state 'final-state
                          'result# 'error# 'value# 'state#}
        binding-pairs (partition 2 bindings)]
    
    ;; –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    (doseq [[binding _] binding-pairs]
      (when (and (symbol? binding) 
                 (not= binding '_)  ; _ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                 (forbidden-names binding))
        (throw (ex-info "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ do-result - –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∑–∞—Ö–≤–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö" 
                       {:forbidden-binding binding
                        :forbidden-names forbidden-names
                        :suggestion "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"}))))
    
    ;; –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –û–î–ò–ù —Ä–∞–∑ –¥–ª—è –≤—Å–µ–≥–æ –º–∞–∫—Ä–æ—Å–∞
    (let [result-sym (gensym "monadic-result")
          temp-sym (gensym "temp-value")]
      
      ;; –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ (–ù–ï –º–∞–∫—Ä–æ—Å!)
      (letfn [(build-monadic-chain [pairs final-body]
                (if (empty? pairs)
                  ;; –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ
                  `(do ~@final-body)
                  ;; –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
                  (let [[binding expr] (first pairs)
                        remaining-pairs (rest pairs)]
                    `(let [~result-sym ~expr]
                       (if (ok? ~result-sym)
                         (let [~binding (:value ~result-sym)]
                           ~(build-monadic-chain remaining-pairs final-body))
                         ~result-sym)))))]  ; –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        
        ;; –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        (build-monadic-chain binding-pairs body)))))

;; ============================================================================
;; –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ì–ò–ì–ò–ï–ù–ò–ß–ï–°–ö–ò–ï –ú–ê–ö–†–û–°–´
;; ============================================================================

(defmacro with-error-context
  "–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –æ—à–∏–±–∫–µ —Å –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç–æ–π"
  [context-msg expr]
  (let [result-sym (gensym "context-result")
        error-sym (gensym "context-error")]
    `(let [~result-sym ~expr]
       (if (error? ~result-sym)
         (let [~error-sym (first (:errors ~result-sym))]
           (error (str ~context-msg ": " (:message ~error-sym))
                  (merge ~error-sym {:context ~context-msg})))
         ~result-sym))))

(defmacro safe-operation
  "–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"
  [operation & [error-context]]
  (let [result-sym (gensym "safe-result")
        exception-sym (gensym "safe-exception")]
    `(try
       (ok ~operation)
       (catch Exception ~exception-sym
         (error (str ~(or error-context "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏") 
                     ": " (.getMessage ~exception-sym))
                {:exception-type (type ~exception-sym)
                 :exception-message (.getMessage ~exception-sym)})))))

;; ============================================================================
;; –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
;; ============================================================================

(defn demo-hygiene-safety []
  (println "\nüü¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ò–ì–ò–ï–ù–ò–ß–ï–°–ö–ò –ß–ò–°–¢–û–ì–û –ö–û–î–ê:")
  (println "```clojure")
  (println ";; –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ do-result")
  (println "(do-result")
  (println "  [validated-input (validate-filename filename)")
  (println "   found-file (find-include-file validated-input paths)")
  (println "   file-content (read-file-safely found-file)")
  (println "   processed-content (process-includes file-content)]")
  (println "  (ok processed-content))")
  (println "```")
  
  (println "\n‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
  (println "   ‚Ä¢ –ö–∞–∂–¥–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è")
  (println "   ‚Ä¢ –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
  (println "   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
  (println "   ‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç—å –±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
  
  (println "\nüîí –ó–ê–©–ò–¢–ê –û–¢ –û–®–ò–ë–û–ö:")
  (println "   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
  (println "   ‚Ä¢ –Ø–≤–Ω—ã–µ gensym –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö")
  (println "   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –º–∞–∫—Ä–æ—Å–∞")
  (println "   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö"))

;; ============================================================================
;; –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ì–ò–ï–ù–ò–ß–ï–°–ö–û–ô –ß–ò–°–¢–û–¢–´
;; ============================================================================

(defn test-hygiene-protection []
  (println "\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–©–ò–¢–´ –û–¢ –ó–ê–•–í–ê–¢–ê –ü–ï–†–ï–ú–ï–ù–ù–´–•:")
  
  ;; –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
  (println "\n1. –¢–µ—Å—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω:")
  (try
    (macroexpand '(do-result
                    [result (ok "test")]
                    (ok result)))
    (println "   ‚ùå –ó–∞—â–∏—Ç–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç - 'result' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
    (catch Exception e
      (println "   ‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:" (.getMessage e))))
  
  ;; –¢–µ—Å—Ç 2: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
  (println "\n2. –¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω:")
  (try
    (macroexpand '(do-result
                    [data (ok "test")
                     processed (ok (str data "!"))]
                    (ok processed)))
    (println "   ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    (catch Exception e
      (println "   ‚ùå –û—à–∏–±–∫–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏:" (.getMessage e))))
  
  ;; –¢–µ—Å—Ç 3: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  (println "\n3. –¢–µ—Å—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (_):")
  (try
    (macroexpand '(do-result
                    [_ (ok "ignored")
                     data (ok "important")]
                    (ok data)))
    (println "   ‚úÖ –°–∏–º–≤–æ–ª '_' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    (catch Exception e
      (println "   ‚ùå –û—à–∏–±–∫–∞ —Å —Å–∏–º–≤–æ–ª–æ–º '_':" (.getMessage e)))))

;; ============================================================================
;; –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–ê–†–°–ï–†–û–ú
;; ============================================================================

(defn compare-with-parser []
  (println "\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ú–ê–ö–†–û–°–û–ú do-parse –ò–ó –ü–ê–†–°–ï–†–ê:")
  (println (str "-" (apply str (repeat 60 "-"))))
  
  (println "\nüéØ –û–ë–©–ò–ï –ü–†–ò–ù–¶–ò–ü–´:")
  (println "   ‚úÖ –Ø–≤–Ω—ã–µ gensym –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö")
  (println "   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
  (println "   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ö–≤–∞—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
  (println "   ‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –º–∞–∫—Ä–æ—Å–∞")
  
  (println "\nüîÑ –†–ê–ó–õ–ò–ß–ò–Ø:")
  (println "   ‚Ä¢ do-parse: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å ParseResult + State")
  (println "   ‚Ä¢ do-result: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Result/Either")
  (println "   ‚Ä¢ do-parse: –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
  (println "   ‚Ä¢ do-result: —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
  
  (println "\nüí° –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
  (println "   ‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—É –∂–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
  (println "   ‚Ä¢ –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞—Ö–≤–∞—Ç–∞")
  (println "   ‚Ä¢ –°—Ö–æ–∂–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–ø–æ—á–µ–∫"))

;; ============================================================================
;; –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–ê–õ–ò–ó–ê–¶–ò–ò
;; ============================================================================

(defn implementation-recommendations []
  (println "\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:")
  (println (str "=" (apply str (repeat 50 "="))))
  
  (println "\nüèóÔ∏è –≠–¢–ê–ü–´ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:")
  (println "   1. –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã Ok/Error")
  (println "   2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ ok?, error?, bind")
  (println "   3. –°–æ–∑–¥–∞—Ç—å –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–π –º–∞–∫—Ä–æ—Å do-result")
  (println "   4. –î–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã")
  (println "   5. –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã")
  
  (println "\nüß™ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´:")
  (println "   ‚Ä¢ –¢–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
  (println "   ‚Ä¢ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω")
  (println "   ‚Ä¢ –¢–µ—Å—Ç –∫–æ–º–ø–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏")
  (println "   ‚Ä¢ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
  (println "   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
  
  (println "\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–û–ú–ï–ù–¢–´:")
  (println "   ‚Ä¢ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å symbol# (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π gensym)")
  (println "   ‚Ä¢ –ù–ï –¥–µ–ª–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã –º–∞–∫—Ä–æ—Å–∞")
  (println "   ‚Ä¢ –í–°–ï–ì–î–ê –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
  (println "   ‚Ä¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–∏–≥–∏–µ–Ω—É"))

;; ============================================================================
;; –û–°–ù–û–í–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø
;; ============================================================================

(defn -main []
  (println "üî¨ –ê–ù–ê–õ–ò–ó –ì–ò–ì–ò–ï–ù–ò–ß–ï–°–ö–û–ô –ß–ò–°–¢–û–¢–´ –ú–û–ù–ê–î–ò–ß–ï–°–ö–û–ì–û –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê")
  (println (str "=" (apply str (repeat 80 "="))))
  
  (analyze-hygiene-problems)
  (show-problematic-code)
  (demo-hygiene-safety)
  (test-hygiene-protection)
  (compare-with-parser)
  (implementation-recommendations)
  
  (println "\n" (str "=" (apply str (repeat 80 "="))))
  (println "üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
  (println "   –ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–π –º–∞–∫—Ä–æ—Å do-result –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù")
  (println "   –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.")
  (println "   ")
  (println "   –û–ø—ã—Ç —Å do-parse –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–∏–≥–∏–µ–Ω—ã")
  (println "   –º–∞–∫—Ä–æ—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ç—Ä—É–¥–Ω–æ–æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö –±–∞–≥–æ–≤.")
  (println (str "=" (apply str (repeat 80 "=")))))

(-main) 