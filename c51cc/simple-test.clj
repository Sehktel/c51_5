#!/usr/bin/env clojure

"–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–µ—Ä–∞
 –ó–∞–ø—É—Å–∫: clojure -M simple-test.clj"

(require '[c51cc.lexer :as lexer])

;; –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏
(defn test-basic-functionality []
  (println "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
  
  ;; –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏
  (let [test-input "int x = 5;"
        tokens (lexer/tokenize test-input)]
    (if (:success tokens)
      (do
        (println "‚úÖ –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        (println "–¢–æ–∫–µ–Ω—ã:" (:tokens tokens)))
      (println "‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏:" (:error tokens))))
  
  ;; –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  (let [expressions ["x" "5" "x + y" "func()" "arr[0]"]]
    (doseq [expr expressions]
      (let [tokens (lexer/tokenize expr)]
        (if (:success tokens)
          (println (str "‚úÖ –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è '" expr "' —É—Å–ø–µ—à–Ω–∞"))
          (println (str "‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ '" expr "'"))))))
  
  (println "\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
  (println "‚ú® –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ª–µ–∫—Å–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
  (println "üîß –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ AST"))

;; –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
(test-basic-functionality) 