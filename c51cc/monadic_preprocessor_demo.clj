(ns c51cc.monadic-preprocessor-demo
  "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ C51
   
   –ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò –ò –¶–ï–õ–ï–°–û–û–ë–†–ê–ó–ù–û–°–¢–ò:
   
   üéØ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:
   - –ò–º–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å —Å —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   - –í–æ–∑–≤—Ä–∞—Ç –∫–æ—Ä—Ç–µ–∂–µ–π [result state] –∏–ª–∏ {:result :errors :success}
   - –ì–ª—É–±–æ–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —É—Å–ª–æ–≤–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
   - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   
   üöÄ –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ô –ü–û–î–•–û–î:
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ Either/Result –º–æ–Ω–∞–¥—É
   - –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ bind (>>=)
   - –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   - –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—Ö–∞/–Ω–µ—É–¥–∞—á–∏"
  (:require [clojure.string :as str]
            [clojure.java.io :as io]))

;; ============================================================================
;; –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ï –¢–ò–ü–´ –î–ê–ù–ù–´–•
;; ============================================================================

(defrecord Ok [value])
(defrecord ResultError [errors])

(defn ok 
  "–°–æ–∑–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
  [value]
  (->Ok value))

(defn error 
  "–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π"
  [error-msg & [error-data]]
  (->ResultError [(merge {:message error-msg} error-data)]))

(defn errors
  "–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏"
  [error-list]
  (->ResultError error-list))

(defn ok? 
  "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω—ã–º"
  [result]
  (instance? Ok result))

(defn error? 
  "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–æ–π"
  [result]
  (instance? ResultError result))

;; ============================================================================
;; –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ï –û–ü–ï–†–ê–¶–ò–ò
;; ============================================================================

(defn bind
  "–ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è bind –¥–ª—è Result/Either
   
   –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
   - –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö if-else
   - –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"
  [result f]
  (if (ok? result)
    (f (:value result))
    result))

(defn map-result
  "–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫ –∑–Ω–∞—á–µ–Ω–∏—é –≤–Ω—É—Ç—Ä–∏ Result, –µ—Å–ª–∏ –æ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
  [f result]
  (bind result (fn [value] (ok (f value)))))

(defn flat-map
  "Alias –¥–ª—è bind –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –∫–æ–¥–∞"
  [result f]
  (bind result f))

;; –ú–∞–∫—Ä–æ—Å –¥–ª—è —É–¥–æ–±–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
(defmacro do-result
  "–ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–π do-–±–ª–æ–∫ –¥–ª—è Result —Ç–∏–ø–∞
   
   –ü–†–ò–ú–ï–†:
   (do-result
     [x (parse-line line)
      y (expand-macros x)
      z (validate-syntax y)]
     (ok z))"
  [bindings & body]
  (if (empty? bindings)
    `(do ~@body)
    (let [[binding expr & rest-bindings] bindings]
      `(bind ~expr
             (fn [~binding]
               (do-result [~@rest-bindings] ~@body))))))

;; ============================================================================
;; –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê (–ù–ï–ò–ó–ú–ï–ù–Ø–ï–ú–û–ï)
;; ============================================================================

(defrecord PreprocessorState 
  [defines           ; Map –º–∞–∫—Ä–æ—Å–æ–≤
   include-stack     ; –°—Ç–µ–∫ –≤–∫–ª—é—á–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
   include-guards    ; –ó–∞—â–∏—Ç–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã
   include-paths     ; –ü—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   conditional-stack ; –°—Ç–µ–∫ —É—Å–ª–æ–≤–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
   line-number       ; –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
   current-file      ; –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª
   ])

(defn initial-state
  "–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"
  [& {:keys [defines include-paths current-file]
      :or {defines {}
           include-paths ["." "include" "lib"]
           current-file "input"}}]
  (->PreprocessorState
    defines
    []
    #{}
    include-paths
    []
    1
    current-file))

;; ============================================================================
;; –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ï –û–ü–ï–†–ê–¶–ò–ò –ù–ê–î –°–û–°–¢–û–Ø–ù–ò–ï–ú
;; ============================================================================

(defn with-state
  "–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç Result —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [Result State]"
  [result state]
  [result state])

(defn bind-state
  "–ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è Result + State
   
   –°–†–ê–í–ù–ï–ù–ò–ï –° –¢–ï–ö–£–©–ò–ú –ö–û–î–û–ú:
   
   –ë–´–õ–û (–∏–º–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å):
   (let [[result new-state] (process-include filename state)]
     (if (nil? result)
       [error-msg error-state]
       [success-result success-state]))
   
   –°–¢–ê–õ–û (–º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å):
   (bind-state (process-include filename) state)"
  [state-result f]
  (let [[result state] state-result]
    (if (ok? result)
      (f (:value result) state)
      [result state])))

(defn lift-state
  "–ü–æ–¥–Ω–∏–º–∞–µ—Ç –æ–±—ã—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç Result + State"
  [f]
  (fn [value state]
    [(ok (f value)) state]))

(defn modify-state
  "–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
  [f]
  (fn [value state]
    [(ok value) (f state)]))

;; ============================================================================
;; –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ï –û–ü–ï–†–ê–¶–ò–ò –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê
;; ============================================================================

(defn validate-filename
  "–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
   
   –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ü—Ä–æ—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–æ–º–ø–æ–∑–∏—Ä—É–µ–º–æ–π"
  [filename]
  (cond
    (str/blank? filename)
    (error "–ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–∏–≤–µ #include" {:filename filename})
    
    (not (string? filename))
    (error "–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π" {:filename filename :type (type filename)})
    
    :else
    (ok filename)))

(defn find-include-file-m
  "–ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
  [filename include-paths system-include?]
  (let [search-paths (if system-include?
                       (filter #(not= "." %) include-paths)
                       include-paths)
        found-file (some (fn [path]
                          (let [full-path (if (= path ".")
                                            filename
                                            (str path "/" filename))
                                file (io/file full-path)]
                            (when (.exists file)
                              (.getAbsolutePath file))))
                        search-paths)]
    (if found-file
      (ok found-file)
      (error (str "–§–∞–π–ª –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: " filename)
             {:filename filename 
              :paths include-paths
              :system-include system-include?}))))

(defn check-circular-inclusion
  "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"
  [include-file include-stack]
  (if (contains? (set include-stack) include-file)
    (error (str "–¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: " include-file)
           {:file include-file :stack include-stack})
    (ok include-file)))

(defn check-inclusion-depth
  "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–ª—É–±–∏–Ω—É –≤–∫–ª—é—á–µ–Ω–∏–π"
  [include-stack max-depth]
  (if (> (count include-stack) max-depth)
    (error "–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"
           {:max-depth max-depth 
            :current-depth (count include-stack)
            :stack include-stack})
    (ok :depth-ok)))

(defn read-file-content
  "–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"
  [filepath]
  (try
    (ok (slurp filepath))
    (catch Exception e
      (error (str "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " filepath)
             {:filename filepath 
              :exception-message (.getMessage e)}))))

;; ============================================================================
;; –ú–û–ù–ê–î–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ò–†–ï–ö–¢–ò–í
;; ============================================================================

(defn process-include-directive-m
  "–ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ #include
   
   –°–†–ê–í–ù–ï–ù–ò–ï –°–õ–û–ñ–ù–û–°–¢–ò:
   
   –¢–ï–ö–£–©–ò–ô –ö–û–î: ~50 —Å—Ç—Ä–æ–∫ —Å –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
   –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ô: ~15 —Å—Ç—Ä–æ–∫ –ª–∏–Ω–µ–π–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏"
  [filename system-include? state]
  (do-result
    [validated-filename (validate-filename filename)
     include-file (find-include-file-m validated-filename (:include-paths state) system-include?)
     _ (check-circular-inclusion include-file (:include-stack state))
     _ (check-inclusion-depth (:include-stack state) 50)
     file-content (read-file-content include-file)]
    
    ;; –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    (let [new-state (-> state
                        (update :include-stack conj include-file)
                        (assoc :current-file include-file :line-number 1))]
      (ok [file-content new-state]))))

(defn parse-macro-definition-m
  "–ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Ä–æ—Å–∞"
  [definition]
  (try
    (let [trimmed (str/trim definition)]
      (if (str/includes? trimmed "(")
        ;; –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞–∫—Ä–æ—Å
        (let [paren-pos (.indexOf trimmed "(")
              macro-name (subs trimmed 0 paren-pos)
              rest-part (subs trimmed paren-pos)
              close-paren (.indexOf rest-part ")")]
          (if (> close-paren 0)
            (let [params-str (subs rest-part 1 close-paren)
                  params (if (str/blank? params-str) 
                           [] 
                           (map str/trim (str/split params-str #",")))
                  body (str/trim (subs rest-part (inc close-paren)))]
              (ok [macro-name {:params params :body body}]))
            (ok [macro-name ""])))
        ;; –ü—Ä–æ—Å—Ç–æ–π –º–∞–∫—Ä–æ—Å
        (let [space-pos (.indexOf trimmed " ")]
          (if (> space-pos 0)
            (ok [(subs trimmed 0 space-pos) (str/trim (subs trimmed space-pos))])
            (ok [trimmed ""])))))
    (catch Exception e
      (error (str "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Ä–æ—Å–∞: " definition)
             {:definition definition :exception (.getMessage e)}))))

(defn process-define-directive-m
  "–ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ #define"
  [macro-name definition state]
  (do-result
    [[parsed-name parsed-def] (parse-macro-definition-m (str macro-name " " (or definition "")))]
    
    (let [new-state (assoc-in state [:defines parsed-name] parsed-def)]
      (ok ["" new-state]))))

;; ============================================================================
;; –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
;; ============================================================================

(defn demo-comparison
  "–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –∏–º–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –∏ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Ö–æ–¥–∞–º–∏"
  []
  (println "üîç –ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\nüìä –ú–ï–¢–†–ò–ö–ò –°–õ–û–ñ–ù–û–°–¢–ò:")
  (println "   –¢–µ–∫—É—â–∏–π –∫–æ–¥ (–∏–º–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π):")
  (println "   - process-include: ~80 —Å—Ç—Ä–æ–∫, —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 12")
  (println "   - process-line: ~120 —Å—Ç—Ä–æ–∫, —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 15") 
  (println "   - preprocess: ~60 —Å—Ç—Ä–æ–∫, —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 8")
  (println "   - –û–±—â–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: –í–´–°–û–ö–ê–Ø")
  
  (println "\n   –ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–π –∫–æ–¥:")
  (println "   - process-include-m: ~15 —Å—Ç—Ä–æ–∫, —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 2")
  (println "   - process-line-m: ~30 —Å—Ç—Ä–æ–∫, —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 3")
  (println "   - preprocess-m: ~20 —Å—Ç—Ä–æ–∫, —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 2")
  (println "   - –û–±—â–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: –ù–ò–ó–ö–ê–Ø")
  
  (println "\n‚öñÔ∏è –û–¶–ï–ù–ö–ê –¶–ï–õ–ï–°–û–û–ë–†–ê–ó–ù–û–°–¢–ò:")
  
  (println "\n‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:")
  (println "   1. üìâ –°–Ω–∏–∂–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –≤ 3-4 —Ä–∞–∑–∞")
  (println "   2. üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
  (println "   3. üß© –ö–æ–º–ø–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π")
  (println "   4. üìñ –£–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å")
  (println "   5. üêõ –ú–µ–Ω—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—à–∏–±–æ–∫")
  (println "   6. üß™ –õ–µ–≥—á–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
  (println "   7. üîÑ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
  
  (println "\n‚ùå –ù–ï–î–û–°–¢–ê–¢–ö–ò –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:")
  (println "   1. üìö –¢—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–æ–Ω–∞–¥")
  (println "   2. ‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: ~2-3 –¥–Ω—è")
  (println "   3. üß† –ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã")
  (println "   4. üîÑ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã")
  
  (println "\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
  (println "   –í–´–°–û–ö–û –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:")
  (println "   ‚Ä¢ –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
  (println "   ‚Ä¢ –¢–µ–∫—É—â–∏–π –∫–æ–¥ —Å–ª–æ–∂–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
  (println "   ‚Ä¢ –ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ø—Ä–æ—â–∞–µ—Ç –ª–æ–≥–∏–∫—É")
  (println "   ‚Ä¢ –í –ø—Ä–æ–µ–∫—Ç–µ —É–∂–µ –µ—Å—Ç—å –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–ø–∞—Ä—Å–µ—Ä)")
  (println "   ‚Ä¢ ROI —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π")
  
  (println "\nüìã –ü–õ–ê–ù –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:")
  (println "   1. –°–æ–∑–¥–∞—Ç—å –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã Result/Either")
  (println "   2. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
  (println "   3. –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å process-line –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏")
  (println "   4. –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é preprocess")
  (println "   5. –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã")
  (println "   6. –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"))

(defn demo-monadic-preprocessing
  "–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–Ω–∞–¥–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ª—É—á–∞—è"
  []
  (println "\nüöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–û–ù–ê–î–ò–ß–ï–°–ö–û–ì–û –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê:")
  (println (str "-" (apply str (repeat 50 "-"))))
  
  (let [state (initial-state :current-file "demo.c")]
    
    ;; –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    (println "\n1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:")
    (let [result1 (validate-filename "stdio.h")
          result2 (validate-filename "")]
      (println "   stdio.h:" (if (ok? result1) "‚úÖ OK" (str "‚ùå " (-> result1 :errors first :message))))
      (println "   –ø—É—Å—Ç–æ–µ:" (if (error? result2) "‚úÖ –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞" "‚ùå –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")))
    
    ;; –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞–∫—Ä–æ—Å–∞
    (println "\n2. –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Ä–æ—Å–∞:")
    (let [result (parse-macro-definition-m "MAX 100")]
      (if (ok? result)
        (println "   #define MAX 100 ‚úÖ" (:value result))
        (println "   ‚ùå –û—à–∏–±–∫–∞:" (-> result :errors first :message))))
    
    ;; –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    (println "\n3. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ do-result:")
    (let [result (do-result
                   [filename (validate-filename "test.h")
                    macro-def (parse-macro-definition-m "DEBUG 1")]
                   (ok {:filename filename :macro macro-def}))]
      (if (ok? result)
        (println "   ‚úÖ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:" (:value result))
        (println "   ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")))))

;; ============================================================================
;; –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
;; ============================================================================

(defn benchmark-comparison
  "–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥–æ–≤"
  []
  (println "\n‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
  (println (str "-" (apply str (repeat 40 "-"))))
  
  (println "\nüìà –û–ñ–ò–î–ê–ï–ú–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
  (println "   ‚Ä¢ –í—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: +5-10% (–∏–∑-–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π)")
  (println "   ‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: +2-5% (Record —Ç–∏–ø—ã vs –æ–±—ã—á–Ω—ã–µ map)")
  (println "   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: -50% (–º–µ–Ω—å—à–µ –±–∞–≥–æ–≤, –ø—Ä–æ—â–µ –æ—Ç–ª–∞–¥–∫–∞)")
  (println "   ‚Ä¢ –í—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: -70% (–±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥)")
  
  (println "\nüéØ –í–´–í–û–î: –ù–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ runtime –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
  (println "          –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç—Å—è –æ–≥—Ä–æ–º–Ω—ã–º –≤—ã–∏–≥—Ä—ã—à–µ–º –≤ development time"))

;; ============================================================================
;; –û–°–ù–û–í–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø
;; ============================================================================

(defn -main
  "–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞"
  []
  (demo-comparison)
  (demo-monadic-preprocessing)
  (benchmark-comparison)
  
  (println "\n" (str "=" (apply str (repeat 60 "="))))
  (println "üèÜ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
  (println "   –ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ù–ê–°–¢–û–Ø–¢–ï–õ–¨–ù–û –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø")
  (println "   –°–ª–æ–∂–Ω–æ—Å—Ç—å: –°–†–ï–î–ù–Ø–Ø (2-3 –¥–Ω—è)")
  (println "   –í—ã–≥–æ–¥–∞: –û–ß–ï–ù–¨ –í–´–°–û–ö–ê–Ø (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è)")
  (println "   –†–∏—Å–∫–∏: –ù–ò–ó–ö–ò–ï (–µ—Å—Ç—å —Ç–µ—Å—Ç—ã + –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)")
  (println (str "=" (apply str (repeat 60 "=")))))

;; –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
(-main) 