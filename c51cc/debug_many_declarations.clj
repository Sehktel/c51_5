(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

(println "üîç –û–¢–õ–ê–î–ö–ê –ü–ê–†–°–ò–ù–ì–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –î–ï–ö–õ–ê–†–ê–¶–ò–ô")
(println "==============================================")

;; –¢–µ—Å—Ç: –ü–æ—à–∞–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–≤—É—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π
(let [code "int x = 10; void main() { }"
      tokens (lexer/tokenize code)]
  (println (str "–ö–æ–¥: " code))
  (println (str "–¢–æ–∫–µ–Ω—ã (" (count tokens) "):"))
  (doseq [i (range (count tokens))]
    (println (str "  " i ": " (nth tokens i))))
  
  ;; –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  (let [initial-state (parser/parse-state tokens)]
    (println (str "\n–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " initial-state))
    
    ;; –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –ø–µ—Ä–≤—É—é –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é
    (let [first-decl-result (parser/parse-declaration initial-state)]
      (println (str "\n–ü–µ—Ä–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è:"))
      (println (str "  –£—Å–ø–µ—Ö: " (:success? first-decl-result)))
      (if (:success? first-decl-result)
        (do
          (println (str "  –ó–Ω–∞—á–µ–Ω–∏–µ: " (:value first-decl-result)))
          (println (str "  –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " (:state first-decl-result)))
          (println (str "  –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π: " (:position (:state first-decl-result))))
          
          ;; –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤—Ç–æ—Ä—É—é –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é
          (let [second-decl-result (parser/parse-declaration (:state first-decl-result))]
            (println (str "\n–í—Ç–æ—Ä–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è:"))
            (println (str "  –£—Å–ø–µ—Ö: " (:success? second-decl-result)))
            (if (:success? second-decl-result)
              (do
                (println (str "  –ó–Ω–∞—á–µ–Ω–∏–µ: " (:value second-decl-result)))
                (println (str "  –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π: " (:position (:state second-decl-result)))))
              (println (str "  –û—à–∏–±–∫–∞: " (:error second-decl-result))))))
        (println (str "  –û—à–∏–±–∫–∞: " (:error first-decl-result))))))
  
  ;; –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é many
  (println "\n" (str "=" 50))
  (println "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò MANY:")
  (let [initial-state (parser/parse-state tokens)
        many-result ((parser/many parser/parse-declaration) initial-state)]
    (println (str "–†–µ–∑—É–ª—å—Ç–∞—Ç many:"))
    (println (str "  –£—Å–ø–µ—Ö: " (:success? many-result)))
    (if (:success? many-result)
      (do
        (println (str "  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π: " (count (:value many-result))))
        (println (str "  –î–µ–∫–ª–∞—Ä–∞—Ü–∏–∏: " (:value many-result)))
        (println (str "  –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: " (:position (:state many-result)))))
      (println (str "  –û—à–∏–±–∫–∞: " (:error many-result))))))

(println "\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞") 