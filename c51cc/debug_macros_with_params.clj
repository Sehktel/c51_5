(require '[c51cc.preprocessor :as pp])
(require '[c51cc.preprocessor-v2 :as pp2])

(println "üîç === –û–¢–õ–ê–î–ö–ê –ú–ê–ö–†–û–°–û–í –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò ===")

(def test-code "#define SQUARE(x) ((x) * (x))\nint result = SQUARE(5);")

(println "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥:")
(println test-code)

(println "\n--- –°–¢–ê–†–´–ô –ü–†–ï–ü–†–û–¶–ï–°–°–û–† ---")
(try
  (let [old-result (pp/preprocess test-code)]
    (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" (pr-str old-result))
    (println "–î–ª–∏–Ω–∞:" (count old-result)))
  (catch Exception e
    (println "–û–®–ò–ë–ö–ê:" (.getMessage e))))

(println "\n--- –ù–û–í–´–ô –ü–†–ï–ü–†–û–¶–ï–°–°–û–† ---")
(try
  (let [new-result (pp2/preprocess-v2 test-code)]
    (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" (pr-str (:result new-result)))
    (println "–£—Å–ø–µ—Ö:" (:success new-result))
    (println "–û—à–∏–±–∫–∏:" (count (:errors new-result)))
    (println "–î–ª–∏–Ω–∞:" (count (:result new-result))))
  (catch Exception e
    (println "–û–®–ò–ë–ö–ê:" (.getMessage e))))

(println "\n--- –ü–†–û–í–ï–†–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò –ú–ê–ö–†–û–°–û–í –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò ---")
(println "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: int result = ((5) * (5));")
(println "–ü—Ä–æ–±–ª–µ–º–∞: –ú–∞–∫—Ä–æ—Å—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –Ω–æ–≤–æ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ!")

(println "\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –û–ë–ù–ê–†–£–ñ–ï–ù–ê!") 