(require '[c51cc.lexer :as lexer])
(require '[c51cc.parser :as parser])

(println "=== –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ C51 –ö–û–ú–ü–ò–õ–Ø–¢–û–†–ê ===")

(defn test-c51-code [description code]
  (println (str "\n" description ":"))
  (println (str "–ö–æ–¥: " code))
  (let [tokens (lexer/tokenize code)
        result (parser/parse tokens)]
    (if (:success result)
      (do
        (println "‚úì –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
        (let [ast (:ast result)]
          (println (str "AST —Ç–∏–ø: " (:ast-type ast)))
          (when (= (:ast-type ast) :program)
            (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π: " (count (:declarations ast))))
            (doseq [[i decl] (map-indexed vector (:declarations ast))]
              (println (str "  " (inc i) ". " (:ast-type decl) 
                           (when (:name decl) (str " '" (:name decl) "'"))
                           (when (:interrupt-number decl) (str " interrupt " (:interrupt-number decl)))
                           (when (:using-clause decl) (str " using " (:using-clause decl)))
                           (when (:address decl) (str " @ 0x" (format "%02X" (:address decl))))))))))
      (println (str "‚úó –û—à–∏–±–∫–∞: " (:error result))))))

;; –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è interrupt —Ñ—É–Ω–∫—Ü–∏—è
(test-c51-code "–ü—Ä–æ—Å—Ç–∞—è interrupt —Ñ—É–Ω–∫—Ü–∏—è" 
               "void ext_int0(void) interrupt 0 { P1 = 0xFF; }")

;; –¢–µ—Å—Ç 2: Interrupt —Ñ—É–Ω–∫—Ü–∏—è —Å using
(test-c51-code "Interrupt —Ñ—É–Ω–∫—Ü–∏—è —Å using" 
               "void timer0_isr(void) interrupt 1 using 2 { counter++; }")

;; –¢–µ—Å—Ç 3: –¢–æ–ª—å–∫–æ using –±–µ–∑ interrupt (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
(test-c51-code "–§—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å using" 
               "void fast_func(void) using 1 { temp = data; }")

;; –¢–µ—Å—Ç 4: SFR –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏
(test-c51-code "SFR –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏" 
               "sfr P1 = 0x90; sfr TCON = 0x88;")

;; –¢–µ—Å—Ç 5: SBIT –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏
(test-c51-code "SBIT –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏" 
               "sbit LED = 0x90; sbit BUTTON = 0x91;")

;; –¢–µ—Å—Ç 6: –°–º–µ—à–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
(test-c51-code "–°–º–µ—à–∞–Ω–Ω–∞—è C51 –ø—Ä–æ–≥—Ä–∞–º–º–∞" 
               "sfr P1 = 0x90; sbit LED = 0x90; void timer_isr(void) interrupt 1 { LED = 1; }")

;; –¢–µ—Å—Ç 7: –û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–±–µ–∑ C51 –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤)
(test-c51-code "–û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è" 
               "void main(void) { P1 = 0x00; }")

;; –¢–µ—Å—Ç 8: –§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ interrupt
(test-c51-code "Interrupt —Ñ—É–Ω–∫—Ü–∏—è —Å —Ç–µ–ª–æ–º" 
               "void uart_isr(void) interrupt 4 using 1 { if (flag) { count = 0; } }")

(println "\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")
(println "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ C51 —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞! üéâ") 