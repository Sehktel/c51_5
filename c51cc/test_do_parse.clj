(ns test_do_parse
  "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Å–∞ do-parse –∏ –Ω–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–æ–≤"
  (:require [c51cc.parser :as parser]
            [c51cc.lexer :as lexer]))

;; ============================================================================
;; –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –ú–ê–ö–†–û–°–ê do-parse
;; ============================================================================

(defn test-simple-parser
  "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º do-parse"
  []
  (let [tokens (lexer/tokenize "int x = 42;")
        state (parser/parse-state tokens)]
    
    ;; –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º do-parse
    (let [var-parser (parser/do-parse
                       type-spec parser/parse-type-specifier
                       name (parser/expect-token :identifier)
                       _ (parser/expect-token-value :equal)
                       init parser/parse-expression
                       _ (parser/expect-token-value :semicolon)
                       (parser/return-parser 
                         (parser/variable-declaration-node 
                           type-spec 
                           (parser/extract-identifier-name name) 
                           init)))]
      
      (println "=== –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å do-parse ===")
      (println "–¢–æ–∫–µ–Ω—ã:" tokens)
      (let [result (var-parser state)]
        (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)
        (when (:success? result)
          (println "AST:" (:value result)))))))

(defn test-error-handling
  "–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"
  []
  (let [tokens (lexer/tokenize "int x")  ; –ù–µ–ø–æ–ª–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        state (parser/parse-state tokens)]
    
    ;; –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–æ–∫
    (let [var-parser (parser/with-error-context
                       (parser/do-parse
                         type-spec parser/parse-type-specifier
                         name (parser/expect-token :identifier)
                         _ (parser/expect-token-value :semicolon)
                         (parser/return-parser 
                           (parser/variable-declaration-node 
                             type-spec 
                             (parser/extract-identifier-name name) 
                             nil)))
                       "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")]
      
      (println "\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
      (println "–¢–æ–∫–µ–Ω—ã:" tokens)
      (let [result (var-parser state)]
        (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)))))

(defn test-combinators
  "–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–æ–≤"
  []
  (let [tokens (lexer/tokenize "(42)")
        state (parser/parse-state tokens)]
    
    ;; –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä parenthesized
    (let [paren-parser (parser/parenthesized parser/parse-expression)]
      
      (println "\n=== –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞ parenthesized ===")
      (println "–¢–æ–∫–µ–Ω—ã:" tokens)
      (let [result (paren-parser state)]
        (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)
        (when (:success? result)
          (println "AST:" (:value result))))))

  (let [tokens (lexer/tokenize "1, 2, 3")
        state (parser/parse-state tokens)]
    
    ;; –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä comma-separated
    (let [list-parser (parser/comma-separated parser/parse-expression)]
      
      (println "\n=== –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞ comma-separated ===")
      (println "–¢–æ–∫–µ–Ω—ã:" tokens)
      (let [result (list-parser state)]
        (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)
        (when (:success? result)
          (println "–°–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π:" (:value result)))))))

(defn test-transform-combinator
  "–¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞ transform"
  []
  (let [tokens (lexer/tokenize "42")
        state (parser/parse-state tokens)]
    
    ;; –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä transform –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è —á–∏—Å–ª–∞
    (let [double-parser (parser/transform 
                          parser/parse-expression
                          (fn [expr]
                            (if (= (:ast-type expr) :literal)
                              (assoc expr :value (* 2 (:value expr)))
                              expr)))]
      
      (println "\n=== –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞ transform ===")
      (println "–¢–æ–∫–µ–Ω—ã:" tokens)
      (let [result (double-parser state)]
        (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)
        (when (:success? result)
          (println "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:" (:value result)))))))

(defn test-hygiene
  "–¢–µ—Å—Ç –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–æ–π —á–∏—Å—Ç–æ—Ç—ã –º–∞–∫—Ä–æ—Å–∞ do-parse"
  []
  (println "\n=== –¢–µ—Å—Ç –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–æ–π —á–∏—Å—Ç–æ—Ç—ã ===")
  
  ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—Ç—Å—è
  (let [state "–≤–Ω–µ—à–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è state"
        result "–≤–Ω–µ—à–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è result"
        tokens (lexer/tokenize "int x;")
        parse-state (parser/parse-state tokens)]
    
    (println "–í–Ω–µ—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    (println "  state:" state)
    (println "  result:" result)
    
    ;; –ò—Å–ø–æ–ª—å–∑—É–µ–º do-parse —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
    (let [parser-fn (parser/do-parse
                      type-spec parser/parse-type-specifier
                      name (parser/expect-token :identifier)
                      _ (parser/expect-token-value :semicolon)
                      (parser/return-parser 
                        {:type type-spec 
                         :name (parser/extract-identifier-name name)}))]
      
      (let [parse-result (parser-fn parse-state)]
        (println "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:" parse-result)
        (println "–í–Ω–µ—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        (println "  state:" state)
        (println "  result:" result)
        (println "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –º–∞–∫—Ä–æ—Å –≥–∏–≥–∏–µ–Ω–∏—á–µ–Ω!")))))

;; ============================================================================
;; –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í
;; ============================================================================

(defn run-all-tests
  "–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"
  []
  (println "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
  (println "=====================================")
  
  (test-simple-parser)
  (test-error-handling)
  (test-combinators)
  (test-transform-combinator)
  (test-hygiene)
  
  (println "\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"))

;; –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
(run-all-tests) 