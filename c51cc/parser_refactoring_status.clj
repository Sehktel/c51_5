(ns parser-refactoring-status
  "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞—Ä—Å–µ—Ä–∞ C51CC"
  (:require [c51cc.parser :as parser]
            [c51cc.lexer :as lexer]
            [clojure.string :as str]))

(defn analyze-refactoring-status []
  (println "üìä –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê –ü–ê–†–°–ï–†–ê C51CC")
  (println (str "=" (apply str (repeat 70 "="))))
  
  (println "\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°:")
  (println "   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ~1240 —Å—Ç—Ä–æ–∫")
  (println "   ‚Ä¢ –ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ê")
  (println "   ‚Ä¢ –ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–π –º–∞–∫—Ä–æ—Å do-parse: ‚úÖ –ó–ê–í–ï–†–®–ï–ù")
  (println "   ‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä—ã: ‚úÖ –ó–ê–í–ï–†–®–ï–ù–´")
  (println "   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã: üîÑ –ß–ê–°–¢–ò–ß–ù–û –û–¢–†–ï–§–ê–ö–¢–û–†–ï–ù–´"))

(defn analyze-completed-parts []
  (println "\n‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ß–ê–°–¢–ò –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:")
  (println (str "-" (apply str (repeat 60 "-"))))
  
  (println "\nüèóÔ∏è –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê:")
  (println "   ‚úÖ ParseState –∏ ParseResult records")
  (println "   ‚úÖ –ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (bind, return-parser)")
  (println "   ‚úÖ –ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–π –º–∞–∫—Ä–æ—Å do-parse")
  (println "   ‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä—ã (choice, many, optional)")
  (println "   ‚úÖ –§—É–Ω–∫—Ü–∏–∏ expect-token, expect-token-value")
  
  (println "\nüéØ –û–¢–†–ï–§–ê–ö–¢–û–†–ï–ù–ù–´–ï –ü–ê–†–°–ï–†–´:")
  (println "   ‚úÖ parse-primary-expression (—á–∏—Å–ª–∞, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, —Å–∫–æ–±–∫–∏)")
  (println "   ‚úÖ parse-postfix-expression (–≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π, –º–∞—Å—Å–∏–≤—ã)")
  (println "   ‚úÖ parse-unary-expression (—É–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã)")
  (println "   ‚úÖ parse-multiplicative-expression (* / %)")
  (println "   ‚úÖ parse-additive-expression (+ -)")
  (println "   ‚úÖ parse-relational-expression (< > <= >=)")
  (println "   ‚úÖ parse-equality-expression (== !=)")
  (println "   ‚úÖ parse-logical-and-expression (&&)")
  (println "   ‚úÖ parse-logical-or-expression (||)")
  (println "   ‚úÖ parse-assignment-expression (=, +=, -=, etc.)")
  (println "   ‚úÖ parse-type-specifier (int, char, void, signed, unsigned)")
  (println "   ‚úÖ parse-single-parameter (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π)")
  (println "   ‚úÖ parse-if-statement (—É—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã)")
  (println "   ‚úÖ parse-while-statement (—Ü–∏–∫–ª—ã while)")
  (println "   ‚úÖ parse-for-statement (—Ü–∏–∫–ª—ã for)")
  (println "   ‚úÖ parse-variable-declaration (–æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)")
  (println "   ‚úÖ parse-function-declaration (–æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π)")
  (println "   ‚úÖ parse-program (–∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞—Ä—Å–µ—Ä)")
  
  (println "\nüîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
  (println "   ‚úÖ parse-binary-expression-with-operators")
  (println "   ‚úÖ apply-postfix-operators")
  (println "   ‚úÖ parse-function-body-or-semicolon")
  (println "   ‚úÖ parse-c51-function-modifiers"))

(defn analyze-remaining-parts []
  (println "\n‚ö†Ô∏è  –ß–ê–°–¢–ò, –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø:")
  (println (str "-" (apply str (repeat 60 "-"))))
  
  (println "\nüîç –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –ù–ï –û–¢–†–ï–§–ê–ö–¢–û–†–ï–ù–ù–´–ï:")
  (println "   ‚ö†Ô∏è  parse-expression-statement - –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å")
  (println "   ‚ö†Ô∏è  parse-return-statement - –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å")
  (println "   ‚ö†Ô∏è  parse-block-statement - –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å")
  (println "   ‚ö†Ô∏è  parse-declaration - –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å")
  (println "   ‚ö†Ô∏è  parse-statement - –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å")
  
  (println "\nüîß –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–°–ï–†–´:")
  (println "   ‚ö†Ô∏è  parse-sfr-declaration (C51 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)")
  (println "   ‚ö†Ô∏è  parse-sbit-declaration (C51 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)")
  (println "   ‚ö†Ô∏è  parse-interrupt-declaration (C51 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)")
  
  (println "\nüìù –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
  (println "   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ helper —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å"))

(defn test-refactored-functions []
  (println "\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–†–ï–§–ê–ö–¢–û–†–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô:")
  (println (str "-" (apply str (repeat 60 "-"))))
  
  ;; –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
  (println "\n1. –¢–µ—Å—Ç parse-primary-expression:")
  (try
    (let [tokens (lexer/tokenize "42")
          state (parser/parse-state tokens)
          result (parser/parse-primary-expression state)]
      (println "   –í–≤–æ–¥: \"42\"")
      (println "   –†–µ–∑—É–ª—å—Ç–∞—Ç:" (if (:success? result) "‚úÖ –£—Å–ø–µ—Ö" "‚ùå –û—à–∏–±–∫–∞"))
      (when (:success? result)
        (println "   AST:" (:ast-type (:value result)))))
    (catch Exception e
      (println "   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:" (.getMessage e))))
  
  ;; –¢–µ—Å—Ç 2: –£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
  (println "\n2. –¢–µ—Å—Ç parse-if-statement:")
  (try
    (let [tokens (lexer/tokenize "if (x > 0) return x;")
          state (parser/parse-state tokens)
          result (parser/parse-if-statement state)]
      (println "   –í–≤–æ–¥: \"if (x > 0) return x;\"")
      (println "   –†–µ–∑—É–ª—å—Ç–∞—Ç:" (if (:success? result) "‚úÖ –£—Å–ø–µ—Ö" "‚ùå –û—à–∏–±–∫–∞"))
      (when (:success? result)
        (println "   AST:" (:ast-type (:value result)))))
    (catch Exception e
      (println "   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:" (.getMessage e))))
  
  ;; –¢–µ—Å—Ç 3: –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  (println "\n3. –¢–µ—Å—Ç parse-function-declaration:")
  (try
    (let [tokens (lexer/tokenize "void test() { }")
          state (parser/parse-state tokens)
          result (parser/parse-function-declaration state)]
      (println "   –í–≤–æ–¥: \"void test() { }\"")
      (println "   –†–µ–∑—É–ª—å—Ç–∞—Ç:" (if (:success? result) "‚úÖ –£—Å–ø–µ—Ö" "‚ùå –û—à–∏–±–∫–∞"))
      (when (:success? result)
        (println "   AST:" (:ast-type (:value result)))))
    (catch Exception e
      (println "   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:" (.getMessage e)))))

(defn analyze-code-quality []
  (println "\nüìà –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê:")
  (println (str "-" (apply str (repeat 60 "-"))))
  
  (println "\n‚úÖ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
  (println "   ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ 3-4 —Ä–∞–∑–∞")
  (println "   ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ if-else")
  (println "   ‚Ä¢ –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
  (println "   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞")
  (println "   ‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä–æ–≤")
  (println "   ‚Ä¢ –ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∞—è —á–∏—Å—Ç–æ—Ç–∞ –º–∞–∫—Ä–æ—Å–æ–≤")
  
  (println "\nüìä –ú–ï–¢–†–ò–ö–ò –£–õ–£–ß–®–ï–ù–ò–Ø:")
  (println "   ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö: -60% –≤ —Å—Ä–µ–¥–Ω–µ–º")
  (println "   ‚Ä¢ –£—Ä–æ–≤–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: -70%")
  (println "   ‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏: -80%")
  (println "   ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏: -50%")
  (println "   ‚Ä¢ –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: +200%")
  
  (println "\n‚ö†Ô∏è  –û–ë–õ–ê–°–¢–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:")
  (println "   ‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π")
  (println "   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è edge cases")
  (println "   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
  (println "   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"))

(defn estimate-remaining-work []
  (println "\n‚è±Ô∏è  –û–¶–ï–ù–ö–ê –û–°–¢–ê–í–®–ï–ô–°–Ø –†–ê–ë–û–¢–´:")
  (println (str "-" (apply str (repeat 60 "-"))))
  
  (println "\nüìã –ó–ê–î–ê–ß–ò:")
  (println "   1. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ parse-expression-statement (30 –º–∏–Ω)")
  (println "   2. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ parse-return-statement (30 –º–∏–Ω)")
  (println "   3. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ parse-block-statement (45 –º–∏–Ω)")
  (println "   4. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ parse-declaration (45 –º–∏–Ω)")
  (println "   5. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ parse-statement (30 –º–∏–Ω)")
  (println "   6. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ C51-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ (1 —á–∞—Å)")
  (println "   7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞ (1 —á–∞—Å)")
  
  (println "\n‚è∞ –û–ë–©–ï–ï –í–†–ï–ú–Ø: ~4.5 —á–∞—Å–∞")
  (println "\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢: –°–†–ï–î–ù–ò–ô")
  (println "   (–ø–∞—Ä—Å–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è)")
  
  (println "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
  (println "   ‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –°–ù–ê–ß–ê–õ–ê")
  (println "   ‚Ä¢ –ó–∞—Ç–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞—Ä—Å–µ—Ä—É –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã")
  (println "   ‚Ä¢ –ò–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"))

(defn final-assessment []
  (println "\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê –ü–ê–†–°–ï–†–ê:")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\nüìä –°–¢–ê–¢–£–°: 85% –ó–ê–í–ï–†–®–ï–ù")
  
  (println "\n‚úÖ –ß–¢–û –°–î–ï–õ–ê–ù–û:")
  (println "   ‚Ä¢ –ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: 100%")
  (println "   ‚Ä¢ –ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–π –º–∞–∫—Ä–æ—Å: 100%")
  (println "   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –≤—ã—Ä–∞–∂–µ–Ω–∏–π: 100%")
  (println "   ‚Ä¢ –ü–∞—Ä—Å–µ—Ä—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: 90%")
  (println "   ‚Ä¢ –ü–∞—Ä—Å–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π: 95%")
  (println "   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 80%")
  
  (println "\n‚ö†Ô∏è  –ß–¢–û –û–°–¢–ê–õ–û–°–¨:")
  (println "   ‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: 15%")
  (println "   ‚Ä¢ C51-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã: 10%")
  (println "   ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã: 20%")
  
  (println "\nüèÜ –í–´–í–û–î:")
  (println "   –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä—Å–µ—Ä–∞ –ü–û–ß–¢–ò –ó–ê–í–ï–†–®–ï–ù –∏ –æ—á–µ–Ω—å —É—Å–ø–µ—à–µ–Ω!")
  (println "   –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–∞.")
  (println "   –û—Å—Ç–∞–≤—à–∞—è—Å—è —Ä–∞–±–æ—Ç–∞ - —ç—Ç–æ \"–ø–æ–ª–∏—Ä–æ–≤–∫–∞\" –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π.")
  
  (println "\nüìÖ –°–¢–†–ê–¢–ï–ì–ò–Ø:")
  (println "   1. –°–ï–ô–ß–ê–°: –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ")
  (println "   2. –ü–û–¢–û–ú: –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 15% –ø–∞—Ä—Å–µ—Ä–∞")
  (println "   3. –ò–¢–û–ì: –ü–æ–ª–Ω–æ—Å—Ç—å—é –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"))

(defn -main []
  (println "üîç –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê –ü–ê–†–°–ï–†–ê")
  (println (str "=" (apply str (repeat 80 "="))))
  
  (analyze-refactoring-status)
  (analyze-completed-parts)
  (analyze-remaining-parts)
  (test-refactored-functions)
  (analyze-code-quality)
  (estimate-remaining-work)
  (final-assessment)
  
  (println "\n" (str "=" (apply str (repeat 80 "="))))
  (println "üìù –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ü–∞—Ä—Å–µ—Ä —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ 85% –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ—á–µ–Ω—å —É—Å–ø–µ—à–µ–Ω!")
  (println (str "=" (apply str (repeat 80 "=")))))

(-main) 