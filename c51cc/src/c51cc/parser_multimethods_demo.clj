(ns c51cc.parser-multimethods-demo
  "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è multimethods –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã cond
   –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–∏–Ω–≥–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ"
  (:require [c51cc.parser :as parser]))

;; ============================================================================
;; MULTIMETHODS - –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê SWITCH-CASE
;; ============================================================================

;; –í–º–µ—Å—Ç–æ –≥—Ä–æ–º–æ–∑–¥–∫–æ–≥–æ cond:
;; (cond 
;;   (= token-type :number) (parse-number token)
;;   (= token-type :identifier) (parse-identifier token)
;;   (= token-type :string) (parse-string token)
;;   :else (parse-unknown token))

;; –ò—Å–ø–æ–ª—å–∑—É–µ–º multimethods –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–∏–Ω–≥–∞:

(defmulti parse-token-by-type 
  "–î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ç–∏–ø—É"
  (fn [token state] (:type token)))

(defmethod parse-token-by-type :number
  [token state]
  (parser/success (parser/literal-node (:value token) :number) state))

(defmethod parse-token-by-type :identifier  
  [token state]
  (parser/success (parser/identifier-node (:value token)) state))

(defmethod parse-token-by-type :string
  [token state]
  (parser/success (parser/literal-node (:value token) :string) state))

(defmethod parse-token-by-type :default
  [token state]
  (parser/failure (str "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞: " (:type token)) state))

;; ============================================================================
;; –î–ò–°–ü–ï–¢–ß–ò–ù–ì –ü–û –ù–ï–°–ö–û–õ–¨–ö–ò–ú –ö–†–ò–¢–ï–†–ò–Ø–ú
;; ============================================================================

(defmulti parse-operator
  "–î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —Ç–∏–ø—É –∏ –∑–Ω–∞—á–µ–Ω–∏—é"
  (fn [token state] [(:type token) (:value token)]))

(defmethod parse-operator [:math-operator :plus]
  [token state]
  (parser/success {:operator :addition :precedence 1} state))

(defmethod parse-operator [:math-operator :multiply]
  [token state]
  (parser/success {:operator :multiplication :precedence 2} state))

(defmethod parse-operator [:logical-operator :and]
  [token state]
  (parser/success {:operator :logical-and :precedence 0} state))

(defmethod parse-operator :default
  [token state]
  (parser/failure (str "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: " (:type token) " " (:value token)) state))

;; ============================================================================
;; –ò–ï–†–ê–†–•–ò–ß–ï–°–ö–ò–ô –î–ò–°–ü–ï–¢–ß–ò–ù–ì
;; ============================================================================

;; –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é —Ç–∏–ø–æ–≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
(derive ::arithmetic-expr ::expression)
(derive ::logical-expr ::expression)
(derive ::assignment-expr ::expression)

(derive ::binary-expr ::arithmetic-expr)
(derive ::unary-expr ::arithmetic-expr)

(defmulti optimize-expression
  "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏"
  :ast-type)

(defmethod optimize-expression ::binary-expr
  [expr]
  (println "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
  ;; –õ–æ–≥–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  expr)

(defmethod optimize-expression ::unary-expr
  [expr]
  (println "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —É–Ω–∞—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
  ;; –õ–æ–≥–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É–Ω–∞—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  expr)

(defmethod optimize-expression ::expression
  [expr]
  (println "–ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è")
  ;; –ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  expr)

;; ============================================================================
;; –î–ò–°–ü–ï–¢–ß–ò–ù–ì –ü–û –°–õ–û–ñ–ù–´–ú –£–°–õ–û–í–ò–Ø–ú
;; ============================================================================

(defmulti parse-c51-construct
  "–ü–∞—Ä—Å–∏–Ω–≥ C51-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
  (fn [tokens state]
    (let [first-token (first tokens)
          second-token (second tokens)]
      (cond
        (and (= (:type first-token) :c51-keyword)
             (= (:value first-token) :interrupt)) :interrupt-declaration
        (and (= (:type first-token) :c51-keyword)
             (= (:value first-token) :sfr)) :sfr-declaration
        (and (= (:type first-token) :c51-keyword)
             (= (:value first-token) :sbit)) :sbit-declaration
        (and (= (:type first-token) :type-keyword)
             (= (:type second-token) :identifier)) :function-or-variable
        :else :unknown))))

(defmethod parse-c51-construct :interrupt-declaration
  [tokens state]
  (println "–ü–∞—Ä—Å–∏–º interrupt –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é")
  ;; –õ–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ interrupt
  (parser/success {:type :interrupt} state))

(defmethod parse-c51-construct :sfr-declaration
  [tokens state]
  (println "–ü–∞—Ä—Å–∏–º SFR –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é")
  ;; –õ–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SFR
  (parser/success {:type :sfr} state))

(defmethod parse-c51-construct :sbit-declaration
  [tokens state]
  (println "–ü–∞—Ä—Å–∏–º SBIT –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é")
  ;; –õ–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SBIT
  (parser/success {:type :sbit} state))

(defmethod parse-c51-construct :function-or-variable
  [tokens state]
  (println "–ü–∞—Ä—Å–∏–º —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")
  ;; –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  (parser/success {:type :function-or-variable} state))

(defmethod parse-c51-construct :default
  [tokens state]
  (parser/failure "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è C51 –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" state))

;; ============================================================================
;; –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ò–ú–£–©–ï–°–¢–í
;; ============================================================================

(defn demo-multimethods []
  (println "üéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MULTIMETHODS === üéØ")
  (println)
  
  ;; –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤
  (println "üìã –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ç–∏–ø—É:")
  (let [number-token {:type :number :value 42}
        id-token {:type :identifier :value "x"}
        unknown-token {:type :unknown :value "???"}
        state {}]
    
    (println "  –ß–∏—Å–ª–æ:" (parse-token-by-type number-token state))
    (println "  –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:" (parse-token-by-type id-token state))
    (println "  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π:" (parse-token-by-type unknown-token state)))
  
  (println)
  (println "üîß –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:")
  (let [plus-token {:type :math-operator :value :plus}
        mult-token {:type :math-operator :value :multiply}
        and-token {:type :logical-operator :value :and}
        state {}]
    
    (println "  –ü–ª—é—Å:" (parse-operator plus-token state))
    (println "  –£–º–Ω–æ–∂–µ–Ω–∏–µ:" (parse-operator mult-token state))
    (println "  –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò:" (parse-operator and-token state)))
  
  (println)
  (println "üèóÔ∏è –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:")
  (optimize-expression {:ast-type ::binary-expr :operator :plus})
  (optimize-expression {:ast-type ::unary-expr :operator :minus})
  (optimize-expression {:ast-type ::assignment-expr :operator :equal})
  
  (println)
  (println "üéâ Multimethods –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç:")
  (println "  ‚Ä¢ –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã)")
  (println "  ‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ—Å—Ç—å –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)")
  (println "  ‚Ä¢ –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –±–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
  (println "  ‚Ä¢ –î–∏—Å–ø–µ—Ç—á–∏–Ω–≥ –ø–æ –ª—é–±—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
  (println "  ‚Ä¢ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"))

;; ============================================================================
;; –°–†–ê–í–ù–ï–ù–ò–ï –° –¢–†–ê–î–ò–¶–ò–û–ù–ù–´–ú–ò –ü–û–î–•–û–î–ê–ú–ò
;; ============================================================================

(defn compare-approaches []
  (println "\nüìä === –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–î–•–û–î–û–í === üìä")
  (println)
  
  (println "‚ùå –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π cond (–ø–ª–æ—Ö–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è):")
  (println "   (cond")
  (println "     (= type :number) (parse-number ...)")
  (println "     (= type :string) (parse-string ...)")
  (println "     (= type :identifier) (parse-identifier ...)")
  (println "     :else (error ...))")
  (println)
  
  (println "‚úÖ Multimethods (–æ—Ç–ª–∏—á–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è):")
  (println "   (defmulti parse-token :type)")
  (println "   (defmethod parse-token :number [token] ...)")
  (println "   (defmethod parse-token :string [token] ...)")
  (println "   (defmethod parse-token :identifier [token] ...)")
  (println)
  
  (println "üéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ multimethods:")
  (println "   ‚Ä¢ –ù–æ–≤—ã–µ —Ç–∏–ø—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞")
  (println "   ‚Ä¢ –ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ")
  (println "   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–π –∏ —Å–ª–æ–∂–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–∏–Ω–≥–∞")
  (println "   ‚Ä¢ –õ—É—á—à–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å"))

;; –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
(def ^:export demo-multimethods demo-multimethods)
(def ^:export compare-approaches compare-approaches) 