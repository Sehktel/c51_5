(require '[c51cc.lexer :as lexer]
         '[c51cc.parser :as parser])

(println "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞—Ä—Å–µ—Ä–∞...")

;; –¢–µ—Å—Ç –ª–µ–∫—Å–µ—Ä–∞
(println "\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–∫—Å–µ—Ä–∞:")
(let [tokens (lexer/tokenize "int x")]
  (if (vector? tokens)
    (do
      (println "‚úÖ –õ–µ–∫—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
      (println "–¢–æ–∫–µ–Ω—ã:" tokens))
    (println "‚ùå –û—à–∏–±–∫–∞ –ª–µ–∫—Å–µ—Ä–∞:" tokens)))

;; –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Ç–∏–ø–æ–≤
(println "\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ parse-type-specifier:")
(let [tokens (lexer/tokenize "unsigned int")
      state (parser/parse-state tokens)
      result (parser/parse-type-specifier state)]
  (if (:success? result)
    (do
      (println "‚úÖ parse-type-specifier —Ä–∞–±–æ—Ç–∞–µ—Ç")
      (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" (:value result)))
    (println "‚ùå –û—à–∏–±–∫–∞ parse-type-specifier:" (:error result))))

;; –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
(println "\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ parse-unary-expression:")
(let [tokens (lexer/tokenize "++x")
      state (parser/parse-state tokens)
      result (parser/parse-unary-expression state)]
  (if (:success? result)
    (do
      (println "‚úÖ parse-unary-expression —Ä–∞–±–æ—Ç–∞–µ—Ç")
      (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" (:value result)))
    (println "‚ùå –û—à–∏–±–∫–∞ parse-unary-expression:" (:error result))))

;; –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
(println "\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ parse-postfix-expression:")
(let [tokens (lexer/tokenize "func()")
      state (parser/parse-state tokens)
      result (parser/parse-postfix-expression state)]
  (if (:success? result)
    (do
      (println "‚úÖ parse-postfix-expression —Ä–∞–±–æ—Ç–∞–µ—Ç")
      (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" (:value result)))
    (println "‚ùå –û—à–∏–±–∫–∞ parse-postfix-expression:" (:error result))))

;; –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
(println "\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ parse-multiplicative-expression:")
(let [tokens (lexer/tokenize "a * b")
      state (parser/parse-state tokens)
      result (parser/parse-multiplicative-expression state)]
  (if (:success? result)
    (do
      (println "‚úÖ parse-multiplicative-expression —Ä–∞–±–æ—Ç–∞–µ—Ç")
      (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" (:value result)))
    (println "‚ùå –û—à–∏–±–∫–∞ parse-multiplicative-expression:" (:error result))))

(println "\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 