(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

(defn parse-string [input]
  (let [tokens (lexer/tokenize input)]
    (parser/parse tokens)))

(defn parse-successful? [result]
  (:success result))

(defn get-ast [result]
  (:ast result))

(defn get-error [result]
  (:error result))

(println "üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ï–†–ê –ù–ê –ß–ò–°–¢–û–ú –ö–û–î–ï")
(println "======================================")

;; –¢–µ—Å—Ç 1: –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
(println "\n1. –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:")
(let [code "unsigned char led_state = 0;

void delay(unsigned int ms) {
  for (unsigned int i = 0; i < ms; i++) {
  }
}

void main() {
  while (1) {
    led_state = !led_state;
    delay(1000);
  }
}"
      result (parse-string code)]
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (parse-successful? result)
    (let [ast (get-ast result)]
      (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π: " (count (:declarations ast))))
      (doseq [i (range (count (:declarations ast)))]
        (let [decl (nth (:declarations ast) i)]
          (println (str "–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è " (inc i) ": " (:ast-type decl) 
                       (when (= (:ast-type decl) :function-declaration)
                         (str " - " (:name decl))))))))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))))

;; –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –¥–≤—É–º—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è–º–∏
(println "\n2. –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –¥–≤—É–º—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è–º–∏:")
(let [code "int x = 10; void main() { x = x + 1; }"
      result (parse-string code)]
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (parse-successful? result)
    (let [ast (get-ast result)]
      (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π: " (count (:declarations ast))))
      (doseq [i (range (count (:declarations ast)))]
        (let [decl (nth (:declarations ast) i)]
          (println (str "–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è " (inc i) ": " (:ast-type decl)
                       (cond 
                         (= (:ast-type decl) :function-declaration) (str " - —Ñ—É–Ω–∫—Ü–∏—è " (:name decl))
                         (= (:ast-type decl) :variable-declaration) (str " - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è " (:name decl))
                         :else ""))))))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))))

;; –¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
(println "\n3. –§—É–Ω–∫—Ü–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:")
(let [code "void test() { int x = 10; if (x > 5) return x; }"
      result (parse-string code)]
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (parse-successful? result)
    (let [ast (get-ast result)
          func-decl (first (:declarations ast))
          body (:body func-decl)]
      (println (str "–§—É–Ω–∫—Ü–∏—è: " (:name func-decl)))
      (println (str "–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–ª–µ: " (count (:statements body))))
      (doseq [i (range (count (:statements body)))]
        (let [stmt (nth (:statements body) i)]
          (println (str "  –û–ø–µ—Ä–∞—Ç–æ—Ä " (inc i) ": " (:ast-type stmt))))))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))))

(println "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ") 