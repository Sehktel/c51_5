(ns lexer-analysis
  "–ê–Ω–∞–ª–∏–∑ –ª–µ–∫—Å–µ—Ä–∞ C51CC –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"
  (:require [c51cc.lexer :as lexer]))

(defn analyze-lexer-architecture []
  (println "üîç –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –õ–ï–ö–°–ï–†–ê C51CC")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\nüìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
  (println "   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ~240 —Å—Ç—Ä–æ–∫")
  (println "   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: tokenize")
  (println "   ‚Ä¢ –ü–æ–¥—Ö–æ–¥: –ò–º–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å regex")
  (println "   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
  (println "   ‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø: Vector —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ nil")
  
  (println "\nüéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:")
  (println "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç regex –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞")
  (println "   ‚Ä¢ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
  (println "   ‚Ä¢ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤")
  (println "   ‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
  (println "   ‚Ä¢ –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏"))

(defn test-lexer-behavior []
  (println "\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–í–ï–î–ï–ù–ò–Ø –õ–ï–ö–°–ï–†–ê:")
  (println (str "-" (apply str (repeat 50 "-"))))
  
  ;; –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
  (println "\n1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥:")
  (let [result (lexer/tokenize "int x = 42;")]
    (println "   –í–≤–æ–¥: \"int x = 42;\"")
    (println "   –†–µ–∑—É–ª—å—Ç–∞—Ç:" (if result "–£—Å–ø–µ—Ö" "–û—à–∏–±–∫–∞"))
    (when result
      (println "   –¢–æ–∫–µ–Ω–æ–≤:" (count result))
      (println "   –ü–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω:" (first result))))
  
  ;; –¢–µ—Å—Ç 2: –ü—É—Å—Ç–æ–π –≤–≤–æ–¥
  (println "\n2. –ü—É—Å—Ç–æ–π –≤–≤–æ–¥:")
  (let [result (lexer/tokenize "")]
    (println "   –í–≤–æ–¥: \"\"")
    (println "   –†–µ–∑—É–ª—å—Ç–∞—Ç:" (if result "–£—Å–ø–µ—Ö" "–û—à–∏–±–∫–∞"))
    (println "   –¢–æ–∫–µ–Ω–æ–≤:" (if result (count result) "N/A")))
  
  ;; –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  (println "\n3. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:")
  (let [result (lexer/tokenize "int x @ 42;")]
    (println "   –í–≤–æ–¥: \"int x @ 42;\"")
    (println "   –†–µ–∑—É–ª—å—Ç–∞—Ç:" (if result "–£—Å–ø–µ—Ö" "–û—à–∏–±–∫–∞"))
    (when result
      (println "   –¢–æ–∫–µ–Ω–æ–≤:" (count result))
      (println "   –°–æ–¥–µ—Ä–∂–∏—Ç nil?" (some nil? result))))
  
  ;; –¢–µ—Å—Ç 4: –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
  (println "\n4. –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã:")
  (let [result (lexer/tokenize "   \n\t  ")]
    (println "   –í–≤–æ–¥: \"   \\n\\t  \"")
    (println "   –†–µ–∑—É–ª—å—Ç–∞—Ç:" (if result "–£—Å–ø–µ—Ö" "–û—à–∏–±–∫–∞"))
    (println "   –¢–æ–∫–µ–Ω–æ–≤:" (if result (count result) "N/A"))))

(defn analyze-error-handling []
  (println "\n‚ùå –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö:")
  (println (str "-" (apply str (repeat 50 "-"))))
  
  (println "\nüö® –ü–†–û–ë–õ–ï–ú–´:")
  (println "   1. –ù–ï–¢ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
  (println "   2. –ù–ï–¢ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
  (println "   3. –ù–ï–¢ –ø–æ–∑–∏—Ü–∏–∏ –æ—à–∏–±–∫–∏")
  (println "   4. –ù–ï–¢ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏")
  (println "   5. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ")
  
  (println "\n‚ö†Ô∏è  –ü–û–°–õ–ï–î–°–¢–í–ò–Ø:")
  (println "   ‚Ä¢ –°–ª–æ–∂–Ω–æ –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥")
  (println "   ‚Ä¢ –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏—á–∏–Ω–µ –æ—à–∏–±–∫–∏")
  (println "   ‚Ä¢ –ü–∞—Ä—Å–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –Ω–µ–ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
  (println "   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç —á—Ç–æ –Ω–µ —Ç–∞–∫"))

(defn analyze-complexity []
  (println "\nüìà –ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò:")
  (println (str "-" (apply str (repeat 50 "-"))))
  
  (println "\nüìä –ú–ï–¢–†–ò–ö–ò:")
  (println "   ‚Ä¢ –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: –ù–ò–ó–ö–ê–Ø (~5)")
  (println "   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª–æ–≤–∏–π: ~50 (cond)")
  (println "   ‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: 2-3 —É—Ä–æ–≤–Ω—è")
  (println "   ‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞: –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï")
  (println "   ‚Ä¢ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: –•–û–†–û–®–ê–Ø")
  
  (println "\n‚úÖ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:")
  (println "   ‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞")
  (println "   ‚Ä¢ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
  (println "   ‚Ä¢ –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã")
  (println "   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
  (println "   ‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å")
  
  (println "\n‚ùå –°–õ–ê–ë–´–ï –°–¢–û–†–û–ù–´:")
  (println "   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
  (println "   ‚Ä¢ –ù–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
  (println "   ‚Ä¢ –ë–æ–ª—å—à–æ–π cond –±–ª–æ–∫")
  (println "   ‚Ä¢ –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏")
  (println "   ‚Ä¢ –°–ª–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"))

(defn monadic-vs-current []
  (println "\n‚öñÔ∏è  –°–†–ê–í–ù–ï–ù–ò–ï: –¢–ï–ö–£–©–ò–ô vs –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ô –ü–û–î–•–û–î:")
  (println (str "=" (apply str (repeat 60 "="))))
  
  (println "\nüîÑ –¢–ï–ö–£–©–ò–ô –ü–û–î–•–û–î:")
  (println "```clojure")
  (println "(defn tokenize [input]")
  (println "  (let [tokens (re-seq pattern input)]")
  (println "    (if (= (count tokens) 1)")
  (println "      (cond")
  (println "        (= token \"int\") [int-type]")
  (println "        (= token \"void\") [void-type]")
  (println "        ;; ... 50+ —É—Å–ª–æ–≤–∏–π")
  (println "        :else nil)")
  (println "      (mapcat tokenize tokens))))")
  (println "```")
  
  (println "\nüöÄ –ú–û–ù–ê–î–ò–ß–ï–°–ö–ò–ô –ü–û–î–•–û–î:")
  (println "```clojure")
  (println "(defn tokenize-m [input]")
  (println "  (do-result")
  (println "    [validated-input (validate-input input)")
  (println "     raw-tokens (extract-tokens validated-input)")
  (println "     typed-tokens (map-tokens classify-token raw-tokens)")
  (println "     final-tokens (validate-tokens typed-tokens)]")
  (println "    (ok final-tokens)))")
  (println "```")
  
  (println "\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–†–ò–ö:")
  (println "| –ê—Å–ø–µ–∫—Ç | –¢–µ–∫—É—â–∏–π | –ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∏–π |")
  (println "|--------|---------|--------------|")
  (println "| –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ | ‚ùå –ù–µ—Ç | ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è |")
  (println "| –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å | ‚ùå –ù–∏–∑–∫–∞—è | ‚úÖ –í—ã—Å–æ–∫–∞—è |")
  (println "| –ö–æ–º–ø–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç—å | ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è | ‚úÖ –í—ã—Å–æ–∫–∞—è |")
  (println "| –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å | ‚úÖ –•–æ—Ä–æ—à–∞—è | ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è |")
  (println "| –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | ‚úÖ –í—ã—Å–æ–∫–∞—è | ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è |")
  (println "| –°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞ | ‚úÖ –ù–∏–∑–∫–∞—è | ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è |")
  (println "| –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å | ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è | ‚úÖ –í—ã—Å–æ–∫–∞—è |")
  (println "| –û—Ç–ª–∞–¥–∫–∞ | ‚ùå –°–ª–æ–∂–Ω–∞—è | ‚úÖ –ü—Ä–æ—Å—Ç–∞—è |"))

(defn cost-benefit-analysis []
  (println "\nüí∞ –ê–ù–ê–õ–ò–ó –ó–ê–¢–†–ê–¢ –ò –í–´–ì–û–î:")
  (println (str "=" (apply str (repeat 50 "="))))
  
  (println "\nüí∏ –ó–ê–¢–†–ê–¢–´ –ù–ê –†–ï–§–ê–ö–¢–û–†–ò–ù–ì:")
  (println "   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: 1-1.5 –¥–Ω—è")
  (println "   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: 4 —á–∞—Å–∞")
  (println "   ‚Ä¢ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–∏ tokenize: 2 —á–∞—Å–∞")
  (println "   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: 2 —á–∞—Å–∞")
  (println "   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 2 —á–∞—Å–∞")
  (println "   ‚Ä¢ –ò–¢–û–ì–û: ~10 —á–∞—Å–æ–≤")
  
  (println "\nüíé –í–´–ì–û–î–´:")
  (println "   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
  (println "   ‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –æ—à–∏–±–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ")
  (println "   ‚Ä¢ –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å –ø–∞—Ä—Å–µ—Ä–æ–º –∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º")
  (println "   ‚Ä¢ –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
  (println "   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
  
  (println "\n‚öñÔ∏è –°–û–û–¢–ù–û–®–ï–ù–ò–ï –ó–ê–¢–†–ê–¢/–í–´–ì–û–î:")
  (println "   ‚Ä¢ –ó–∞—Ç—Ä–∞—Ç—ã: –ù–ò–ó–ö–ò–ï (–ª–µ–∫—Å–µ—Ä –ø—Ä–æ—Å—Ç–æ–π)")
  (println "   ‚Ä¢ –í—ã–≥–æ–¥—ã: –°–†–ï–î–ù–ò–ï (—É–ª—É—á—à–µ–Ω–∏–µ UX)")
  (println "   ‚Ä¢ ROI: –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π")
  (println "   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ù–ò–ó–ö–ò–ô"))

(defn final-recommendation []
  (println "\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
  (println (str "=" (apply str (repeat 50 "="))))
  
  (println "\nüìã –í–ï–†–î–ò–ö–¢: –ü–û–ö–ê –ù–ï –ù–£–ñ–ù–û")
  
  (println "\n‚úÖ –ê–†–ì–£–ú–ï–ù–¢–´ –ü–†–û–¢–ò–í —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:")
  (println "   1. –õ–µ–∫—Å–µ—Ä –†–ê–ë–û–¢–ê–ï–¢ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
  (println "   2. –°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –ù–ò–ó–ö–ê–Ø")
  (println "   3. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –í–´–°–û–ö–ê–Ø")
  (println "   4. –û—à–∏–±–∫–∏ –ª–µ–∫—Å–µ—Ä–∞ –†–ï–î–ö–ò")
  (println "   5. –ï—Å—Ç—å –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏")
  
  (println "\n‚ö†Ô∏è  –ê–†–ì–£–ú–ï–ù–¢–´ –ó–ê —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥:")
  (println "   1. –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
  (println "   2. –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö")
  (println "   3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±—É–¥—É—â–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º")
  
  (println "\nüìÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:")
  (println "   1. –°–ù–ê–ß–ê–õ–ê: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)")
  (println "   2. –ü–û–¢–û–ú: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞—Ä—Å–µ—Ä–∞")
  (println "   3. –ó–ê–¢–ï–ú: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ª–µ–∫—Å–µ—Ä–∞ (–µ—Å–ª–∏ –±—É–¥–µ—Ç –≤—Ä–µ–º—è)")
  (println "   4. –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫")
  
  (println "\nüîÑ –ö–û–ú–ü–†–û–ú–ò–°–°–ù–û–ï –†–ï–®–ï–ù–ò–ï:")
  (println "   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ë–ï–ó –º–æ–Ω–∞–¥")
  (println "   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
  (println "   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ—à–∏–±–∫–∏")
  (println "   ‚Ä¢ –í—Ä–µ–º—è: 2-3 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 10")
  
  (println "\nüèÜ –ò–¢–û–ì:")
  (println "   –õ–µ–∫—Å–µ—Ä –≤ –º–æ–Ω–∞–¥–∏—á–µ—Å–∫–æ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ –ù–ï –ù–£–ñ–î–ê–ï–¢–°–Ø")
  (println "   –≤ –±–ª–∏–∂–∞–π—à–µ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ!"))

(defn -main []
  (println "üî¨ –ê–ù–ê–õ–ò–ó –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –ú–û–ù–ê–î–ò–ß–ï–°–ö–û–ì–û –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê –õ–ï–ö–°–ï–†–ê")
  (println (str "=" (apply str (repeat 80 "="))))
  
  (analyze-lexer-architecture)
  (test-lexer-behavior)
  (analyze-error-handling)
  (analyze-complexity)
  (monadic-vs-current)
  (cost-benefit-analysis)
  (final-recommendation)
  
  (println "\n" (str "=" (apply str (repeat 80 "="))))
  (println "üìù –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –õ–µ–∫—Å–µ—Ä –º–æ–∂–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å. –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!")
  (println (str "=" (apply str (repeat 80 "=")))))

(-main) 