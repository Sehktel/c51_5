(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

(println "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ê–†–°–ï–†–ê –ü–û–°–õ–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô")
(println "=" (apply str (repeat 50 "=")))

(defn test-basic-parsing [code description]
  (println (str "\nüìù –¢–µ—Å—Ç: " description))
  (println (str "–ö–æ–¥: " code))
  (try
    (let [tokens (lexer/tokenize code)
          result (parser/parse tokens)]
      (println (str "–¢–æ–∫–µ–Ω–æ–≤: " (count tokens)))
      (println (str "–£—Å–ø–µ—Ö: " (:success result)))
      (if (:success result)
        (let [ast (:ast result)]
          (println (str "AST —Ç–∏–ø: " (:ast-type ast)))
          (when (:declarations ast)
            (println (str "–û–±—ä—è–≤–ª–µ–Ω–∏–π: " (count (:declarations ast)))))
          (when (parser/validate-ast ast)
            (println "‚úÖ AST –≤–∞–ª–∏–¥–µ–Ω"))
          ;; –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
          (when (and (:declarations ast) (> (count (:declarations ast)) 0))
            (let [first-decl (first (:declarations ast))]
              (println (str "–ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: " (:ast-type first-decl)))
              (when (= (:ast-type first-decl) :function-declaration)
                (println (str "  –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏: " (:name first-decl)))
                (println (str "  –¢–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞: " (:return-type first-decl)))
                (println (str "  –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: " (count (:parameters first-decl))))))))
        (println (str "‚ùå –û—à–∏–±–∫–∞: " (:error result))))
      (:success result))
    (catch Exception e
      (println (str "üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " (.getMessage e)))
      false)))

;; –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
(test-basic-parsing "42" "–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ")
(test-basic-parsing "x" "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
(test-basic-parsing "a + b" "–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
(test-basic-parsing "int x = 42;" "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
(test-basic-parsing "void main() { return; }" "–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è")

;; –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–¥–≤–∏–≥–∞ (–Ω–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
(test-basic-parsing "1 << 3" "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–¥–≤–∏–≥–∞ –≤–ª–µ–≤–æ")
(test-basic-parsing "P1 |= (1 << 3);" "–ë–∏—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –ø–æ—Ä—Ç–æ–º")

;; –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ —Ç–µ—Å—Ç–æ–≤
(test-basic-parsing "int add(int a, int b) { return a + b; }" "–§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")

(println "\nüéØ –í–´–í–û–î–´:")
(println "–ï—Å–ª–∏ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ")
(println "–ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç, —Ç–æ –Ω–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–º–∞–ª–∏ –ø–∞—Ä—Å–µ—Ä") 