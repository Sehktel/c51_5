(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

(defn parse-string [input]
  (let [tokens (lexer/tokenize input)]
    (parser/parse tokens)))

(defn parse-successful? [result]
  (:success result))

(defn get-ast [result]
  (:ast result))

(defn get-error [result]
  (:error result))

(println "üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–´–• –°–õ–£–ß–ê–ï–í")
(println "==================================")

;; –ü—Ä–æ–±–ª–µ–º–∞ 1: –ë–ª–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–∫ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è
(println "\n1. –ë–ª–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:")
(let [result (parse-string "{ int x = 10; return x; }")]
  (println (str "–í–≤–æ–¥: '{ int x = 10; return x; }'"))
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (parse-successful? result)
    (let [ast (get-ast result)]
      (println (str "AST —Ç–∏–ø: " (:ast-type ast)))
      (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π: " (count (:declarations ast))))
      (when (> (count (:declarations ast)) 0)
        (let [first-decl (first (:declarations ast))]
          (println (str "–ü–µ—Ä–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è —Ç–∏–ø: " (:ast-type first-decl)))
          (println (str "–ü–µ—Ä–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è: " first-decl)))))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))))

;; –ü—Ä–æ–±–ª–µ–º–∞ 2: –£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä if
(println "\n2. –£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä if:")
(let [result (parse-string "if (x > 0) return x;")]
  (println (str "–í–≤–æ–¥: 'if (x > 0) return x;'"))
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (parse-successful? result)
    (let [ast (get-ast result)]
      (println (str "AST —Ç–∏–ø: " (:ast-type ast)))
      (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π: " (count (:declarations ast))))
      (when (> (count (:declarations ast)) 0)
        (let [first-decl (first (:declarations ast))]
          (println (str "–ü–µ—Ä–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è —Ç–∏–ø: " (:ast-type first-decl)))
          (println (str "–ü–µ—Ä–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è: " first-decl)))))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))))

;; –ü—Ä–æ–±–ª–µ–º–∞ 3: –¶–∏–∫–ª while
(println "\n3. –¶–∏–∫–ª while:")
(let [result (parse-string "while (x > 0) x--;")]
  (println (str "–í–≤–æ–¥: 'while (x > 0) x--;'"))
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (parse-successful? result)
    (let [ast (get-ast result)]
      (println (str "AST —Ç–∏–ø: " (:ast-type ast)))
      (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π: " (count (:declarations ast))))
      (when (> (count (:declarations ast)) 0)
        (let [first-decl (first (:declarations ast))]
          (println (str "–ü–µ—Ä–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è —Ç–∏–ø: " (:ast-type first-decl)))
          (println (str "–ü–µ—Ä–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è: " first-decl)))))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))))

;; –ü—Ä–æ–±–ª–µ–º–∞ 4: –¶–∏–∫–ª for
(println "\n4. –¶–∏–∫–ª for:")
(let [result (parse-string "for (i = 0; i < 10; i++) sum += i;")]
  (println (str "–í–≤–æ–¥: 'for (i = 0; i < 10; i++) sum += i;'"))
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (parse-successful? result)
    (let [ast (get-ast result)]
      (println (str "AST —Ç–∏–ø: " (:ast-type ast)))
      (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π: " (count (:declarations ast))))
      (when (> (count (:declarations ast)) 0)
        (let [first-decl (first (:declarations ast))]
          (println (str "–ü–µ—Ä–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è —Ç–∏–ø: " (:ast-type first-decl)))
          (println (str "–ü–µ—Ä–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è: " first-decl)))))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))))

;; –ü—Ä–æ–±–ª–µ–º–∞ 5: –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
(println "\n5. –¢–µ—Å—Ç –æ—à–∏–±–æ–∫:")
(let [result (parse-string "func(")]
  (println (str "–í–≤–æ–¥: 'func('"))
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (not (parse-successful? result))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))
    (println "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω–æ!")))

(let [result (parse-string "int + 42")]
  (println (str "–í–≤–æ–¥: 'int + 42'"))
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (not (parse-successful? result))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))
    (println "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω–æ!")))

(println "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ") 