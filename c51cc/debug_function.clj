(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

(println "üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–£–ù–ö–¶–ò–ô")

(defn debug-parse [code]
  (println (str "\n=== –ö–æ–¥: " code " ==="))
  (let [tokens (lexer/tokenize code)
        result (parser/parse tokens)]
    (println (str "–¢–æ–∫–µ–Ω–æ–≤: " (count tokens)))
    (println (str "–£—Å–ø–µ—Ö: " (:success result)))
    
    (if (:success result)
      (let [ast (:ast result)]
        (println (str "AST —Ç–∏–ø: " (:ast-type ast)))
        (println (str "–ö–ª—é—á–∏ AST: " (keys ast)))
        
        (when (:declarations ast)
          (println (str "–û–±—ä—è–≤–ª–µ–Ω–∏–π: " (count (:declarations ast))))
          (doseq [[i decl] (map-indexed vector (:declarations ast))]
            (println (str "  " i ": " (if decl (:ast-type decl) "nil")))
            (when decl
              (println (str "    –ö–ª—é—á–∏: " (keys decl)))
              (when (= (:ast-type decl) :function-declaration)
                (println (str "    –ò–º—è: " (:name decl)))
                (println (str "    –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø: " (:return-type decl)))
                (println (str "    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: " (count (:parameters decl))))))))
        
        ;; –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        (try
          (let [valid (parser/validate-ast ast)]
            (println (str "AST –≤–∞–ª–∏–¥–µ–Ω: " valid)))
          (catch Exception e
            (println (str "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " (.getMessage e))))))
      (println (str "–û—à–∏–±–∫–∞: " (:error result))))))

;; –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
(debug-parse "void main() { }")
(debug-parse "int add(int a, int b) { return a + b; }")

;; –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–∂–∏–¥–∞—é—Ç —Ç–µ—Å—Ç—ã
(println "\nüéØ –ü–†–û–í–ï–†–ö–ê –û–ñ–ò–î–ê–ù–ò–ô –¢–ï–°–¢–û–í:")
(let [result (parser/parse (lexer/tokenize "void main() { }"))]
  (when (:success result)
    (let [ast (:ast result)
          func-decl (first (:declarations ast))]
      (println (str "func-decl: " func-decl))
      (when func-decl
        (println (str "func-decl —Ç–∏–ø: " (:ast-type func-decl)))
        (println (str "func-decl –∫–ª—é—á–∏: " (keys func-decl))))))) 