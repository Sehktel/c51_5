(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

(println "üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê –§–£–ù–ö–¶–ò–ô")

(defn test-function-parsing [code description]
  (println (str "\nüìù " description))
  (println (str "–ö–æ–¥: " code))
  (let [tokens (lexer/tokenize code)
        result (parser/parse tokens)]
    (println (str "–£—Å–ø–µ—Ö: " (:success result)))
    (if (:success result)
      (let [ast (:ast result)]
        (println (str "–û–±—ä—è–≤–ª–µ–Ω–∏–π: " (count (:declarations ast))))
        (when (> (count (:declarations ast)) 0)
          (let [first-decl (first (:declarations ast))]
            (println (str "–¢–∏–ø: " (:ast-type first-decl)))
            (when (= (:ast-type first-decl) :function-declaration)
              (println "‚úÖ –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è!")
              (println (str "  –ò–º—è: " (:name first-decl)))))))
      (println (str "‚ùå –û—à–∏–±–∫–∞: " (:error result))))))

;; –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã
(test-function-parsing "void main() { }" "–ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
(test-function-parsing "int add(int a, int b) { return a + b; }" "–§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏") 