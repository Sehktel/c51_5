(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

(defn comprehensive-test
  "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"
  [code description]
  (println (str "\n" (apply str (repeat 60 "=")) "\n"))
  (println (str "–¢–ï–°–¢: " description))
  (println (str (apply str (repeat 60 "="))))
  (println (str "–ö–æ–¥ (" (count code) " —Å–∏–º–≤–æ–ª–æ–≤):"))
  (println code)
  (println (str (apply str (repeat 60 "-"))))
  
  (let [start-time (System/currentTimeMillis)]
    (try
      (let [tokens (lexer/tokenize code)
            tokenize-time (System/currentTimeMillis)
            result (parser/parse tokens)
            parse-time (System/currentTimeMillis)]
        
        (println (str "‚è±Ô∏è  –í—Ä–µ–º—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏: " (- tokenize-time start-time) " –º—Å"))
        (println (str "‚è±Ô∏è  –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: " (- parse-time tokenize-time) " –º—Å"))
        (println (str "‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: " (- parse-time start-time) " –º—Å"))
        (println (str "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: " (count tokens)))
        (println (str "üìä –¢–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: " 
                      (int (/ (* (count tokens) 1000) 
                              (max 1 (- parse-time start-time))))))
        
        (if (:success result)
          (do
            (println "‚úÖ –ü–ê–†–°–ò–ù–ì –£–°–ü–ï–®–ï–ù")
            (let [ast (:ast result)]
              (println (str "üå≥ AST —Ç–∏–ø: " (:ast-type ast)))
              (when (:declarations ast)
                (println (str "üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π: " (count (:declarations ast)))))
              (when (parser/validate-ast ast)
                (println "‚úÖ AST –≤–∞–ª–∏–¥–µ–Ω"))
              
              ;; –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AST
              (when (:declarations ast)
                (let [decls (:declarations ast)
                      functions (filter #(= (:declaration-type %) :function) decls)
                      variables (filter #(= (:declaration-type %) :variable) decls)
                      interrupts (filter #(:interrupt-number %) decls)]
                  (when (> (count functions) 0)
                    (println (str "üîß –§—É–Ω–∫—Ü–∏–π: " (count functions))))
                  (when (> (count variables) 0)
                    (println (str "üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: " (count variables))))
                  (when (> (count interrupts) 0)
                    (println (str "‚ö° –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–π: " (count interrupts))))))))
          (do
            (println "‚ùå –ü–ê–†–°–ò–ù–ì –ü–†–û–í–ê–õ–ï–ù")
            (println (str "‚ùó –û—à–∏–±–∫–∞: " (:error result)))))
        
        (:success result))
      (catch Exception e
        (println (str "üí• –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: " (.getMessage e)))
        false))))

(println "üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ï–†–ê C51 üöÄ")

;; –¢–µ—Å—Ç 1: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–º
(comprehensive-test "
/*
 * –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–º –Ω–∞ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ 8051
 * –ê–≤—Ç–æ—Ä: C51 Compiler Test Suite
 * –í–µ—Ä—Å–∏—è: 1.0
 */

#include <reg51.h>

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
sbit RED_LIGHT    = P1^0;  // –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç
sbit YELLOW_LIGHT = P1^1;  // –ñ–µ–ª—Ç—ã–π —Å–≤–µ—Ç  
sbit GREEN_LIGHT  = P1^2;  // –ó–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
sbit PEDESTRIAN_BUTTON = P3^2;  // –ö–Ω–æ–ø–∫–∞ –ø–µ—à–µ—Ö–æ–¥–∞
sbit PEDESTRIAN_RED    = P1^3;  // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
sbit PEDESTRIAN_GREEN  = P1^4;  // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
unsigned char current_state = 0;
unsigned int timer_counter = 0;
bit pedestrian_request = 0;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
#define RED_TIME    30
#define YELLOW_TIME 5
#define GREEN_TIME  25

// –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –≤ –ø–∞–º—è—Ç–∏ –∫–æ–¥–∞
unsigned char code traffic_states[] = {
  0x01,  // –ö—Ä–∞—Å–Ω—ã–π
  0x03,  // –ö—Ä–∞—Å–Ω—ã–π + –ñ–µ–ª—Ç—ã–π
  0x04,  // –ó–µ–ª–µ–Ω—ã–π
  0x02   // –ñ–µ–ª—Ç—ã–π
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
void delay_ms(unsigned int ms) {
  unsigned int i, j;
  for (i = 0; i < ms; i++) {
    for (j = 0; j < 1000; j++) {
      // –ü—É—Å—Ç–æ–π —Ü–∏–∫–ª –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ 0
void timer0_init() {
  TMOD = 0x01;    // –†–µ–∂–∏–º 1: 16-–±–∏—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä
  TH0 = 0x3C;     // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è 1 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 12–ú–ì—Ü
  TL0 = 0xB0;
  ET0 = 1;        // –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ 0
  TR0 = 1;        // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä 0
  EA = 1;         // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—à–µ—Ö–æ–¥–∞
void external_interrupt_init() {
  IT0 = 1;        // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ —Å–ø–∞–¥—É
  EX0 = 1;        // –†–∞–∑—Ä–µ—à–∏—Ç—å –≤–Ω–µ—à–Ω–µ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ 0
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
void set_traffic_lights(unsigned char state) {
  // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–≤–µ—Ç–æ–≤
  RED_LIGHT = 0;
  YELLOW_LIGHT = 0;
  GREEN_LIGHT = 0;
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω—É–∂–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (state & 0x01) RED_LIGHT = 1;
  if (state & 0x02) YELLOW_LIGHT = 1;
  if (state & 0x04) GREEN_LIGHT = 1;
}

// –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
void set_pedestrian_lights(bit red, bit green) {
  PEDESTRIAN_RED = red;
  PEDESTRIAN_GREEN = green;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ 0
void timer0_isr() interrupt 1 {
  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–µ—Ä–∞
  TH0 = 0x3C;
  TL0 = 0xB0;
  
  timer_counter++;
  
  // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
  switch (current_state) {
    case 0:  // –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç
      set_traffic_lights(traffic_states[0]);
      set_pedestrian_lights(0, 1);  // –ü–µ—à–µ—Ö–æ–¥–∞–º –∑–µ–ª–µ–Ω—ã–π
      if (timer_counter >= RED_TIME) {
        current_state = 1;
        timer_counter = 0;
      }
      break;
      
    case 1:  // –ö—Ä–∞—Å–Ω—ã–π + –ñ–µ–ª—Ç—ã–π
      set_traffic_lights(traffic_states[1]);
      set_pedestrian_lights(1, 0);  // –ü–µ—à–µ—Ö–æ–¥–∞–º –∫—Ä–∞—Å–Ω—ã–π
      if (timer_counter >= YELLOW_TIME) {
        current_state = 2;
        timer_counter = 0;
      }
      break;
      
    case 2:  // –ó–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç
      set_traffic_lights(traffic_states[2]);
      set_pedestrian_lights(1, 0);  // –ü–µ—à–µ—Ö–æ–¥–∞–º –∫—Ä–∞—Å–Ω—ã–π
      if (timer_counter >= GREEN_TIME || pedestrian_request) {
        current_state = 3;
        timer_counter = 0;
        pedestrian_request = 0;
      }
      break;
      
    case 3:  // –ñ–µ–ª—Ç—ã–π —Å–≤–µ—Ç
      set_traffic_lights(traffic_states[3]);
      if (timer_counter >= YELLOW_TIME) {
        current_state = 0;
        timer_counter = 0;
      }
      break;
      
    default:
      current_state = 0;
      timer_counter = 0;
      break;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ –ø–µ—à–µ—Ö–æ–¥–∞)
void external_int0_isr() interrupt 0 {
  // –ê–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥
  delay_ms(50);
  if (!PEDESTRIAN_BUTTON) {
    pedestrian_request = 1;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
void main() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤
  P1 = 0x00;  // –í—Å–µ —Å–≤–µ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã
  P3 = 0xFF;  // –ü–æ—Ä—Ç 3 –Ω–∞ –≤—Ö–æ–¥ (–∫–Ω–æ–ø–∫–∞)
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
  timer0_init();
  external_interrupt_init();
  
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  current_state = 0;
  timer_counter = 0;
  pedestrian_request = 0;
  
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
  while (1) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    if (P2 & 0x01) {  // –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º
      // –ú–∏–≥–∞–Ω–∏–µ –∂–µ–ª—Ç—ã–º —Å–≤–µ—Ç–æ–º
      set_traffic_lights(0x02);
      delay_ms(500);
      set_traffic_lights(0x00);
      delay_ms(500);
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–≤—è–∑—å —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  }
}
" "–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–º")

;; –¢–µ—Å—Ç 2: –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
(comprehensive-test "
// –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
#include <reg51.h>

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞
struct sensor_data {
  unsigned int temperature;
  unsigned int humidity;
  unsigned int pressure;
  unsigned char status;
};

// –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–Ω–µ—à–Ω–µ–π –ø–∞–º—è—Ç–∏
struct sensor_data xdata sensor_buffer[100];
unsigned char data_index = 0;

// –ê–¶–ü —á–µ—Ä–µ–∑ SPI
sbit ADC_CS   = P1^0;
sbit ADC_CLK  = P1^1;
sbit ADC_MOSI = P1^2;
sbit ADC_MISO = P1^3;

// –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –ê–¶–ü
unsigned int read_adc(unsigned char channel) {
  unsigned int result = 0;
  unsigned char i;
  
  ADC_CS = 0;  // –í—ã–±–æ—Ä –º–∏–∫—Ä–æ—Å—Ö–µ–º—ã
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
  for (i = 0; i < 8; i++) {
    ADC_CLK = 0;
    ADC_MOSI = (channel & 0x80) ? 1 : 0;
    channel <<= 1;
    ADC_CLK = 1;
  }
  
  // –ß—Ç–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  for (i = 0; i < 12; i++) {
    ADC_CLK = 0;
    result <<= 1;
    if (ADC_MISO) result |= 1;
    ADC_CLK = 1;
  }
  
  ADC_CS = 1;  // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
  return result;
}

void main() {
  while (1) {
    sensor_buffer[data_index].temperature = read_adc(0);
    sensor_buffer[data_index].humidity = read_adc(1);
    sensor_buffer[data_index].pressure = read_adc(2);
    data_index = (data_index + 1) % 100;
    delay_ms(1000);
  }
}
" "–°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤")

;; –¢–µ—Å—Ç 3: –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–≤—è–∑–∏ UART —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
(comprehensive-test "
// –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–≤—è–∑–∏ UART —Å –∫–æ–ª—å—Ü–µ–≤—ã–º –±—É—Ñ–µ—Ä–æ–º
#define BUFFER_SIZE 64

unsigned char xdata rx_buffer[BUFFER_SIZE];
unsigned char xdata tx_buffer[BUFFER_SIZE];
unsigned char data rx_head = 0, rx_tail = 0;
unsigned char data tx_head = 0, tx_tail = 0;

void uart_init(unsigned int baudrate) {
  SCON = 0x50;  // –†–µ–∂–∏–º 1, —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏–µ–º
  TMOD |= 0x20; // –¢–∞–π–º–µ—Ä 1, —Ä–µ–∂–∏–º 2
  
  // –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
  TH1 = 256 - (11059200L / (384L * baudrate));
  TR1 = 1;      // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ 1
  ES = 1;       // –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ UART
  EA = 1;       // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
}

void uart_send_char(unsigned char c) {
  unsigned char next_head = (tx_head + 1) % BUFFER_SIZE;
  while (next_head == tx_tail); // –ñ–¥–µ–º –º–µ—Å—Ç–æ –≤ –±—É—Ñ–µ—Ä–µ
  
  tx_buffer[tx_head] = c;
  tx_head = next_head;
  
  if (!TI) {
    TI = 0;
    SBUF = tx_buffer[tx_tail];
    tx_tail = (tx_tail + 1) % BUFFER_SIZE;
  }
}

void uart_isr() interrupt 4 {
  if (RI) {
    RI = 0;
    unsigned char next_head = (rx_head + 1) % BUFFER_SIZE;
    if (next_head != rx_tail) {
      rx_buffer[rx_head] = SBUF;
      rx_head = next_head;
    }
  }
  
  if (TI) {
    TI = 0;
    if (tx_head != tx_tail) {
      SBUF = tx_buffer[tx_tail];
      tx_tail = (tx_tail + 1) % BUFFER_SIZE;
    }
  }
}
" "–ü—Ä–æ—Ç–æ–∫–æ–ª UART —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π")

(println "\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
(println "‚úÖ –í—Å–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
(println "üîç –ü–∞—Ä—Å–µ—Ä –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
(println "üöÄ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö!")

;; –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–æ–º —Ñ–∞–π–ª–µ
(println "\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ù–ê –ë–û–õ–¨–®–û–ú –§–ê–ô–õ–ï")
(let [large-code (apply str (for [i (range 100)] (str "int var_" i " = " i ";\n")))
      start-time (System/currentTimeMillis)]
  (try
    (let [tokens (lexer/tokenize large-code)
          result (parser/parse tokens)
          end-time (System/currentTimeMillis)]
      (println (str "üìä –†–∞–∑–º–µ—Ä –∫–æ–¥–∞: " (count large-code) " —Å–∏–º–≤–æ–ª–æ–≤"))
      (println (str "üìä –¢–æ–∫–µ–Ω–æ–≤: " (count tokens)))
      (println (str "‚è±Ô∏è  –í—Ä–µ–º—è: " (- end-time start-time) " –º—Å"))
      (println (str "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: " (int (/ (count large-code) (max 1 (- end-time start-time)))) " —Å–∏–º–≤–æ–ª–æ–≤/–º—Å"))
      (if (:success result)
        (println "‚úÖ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        (println "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞")))
    (catch Exception e
      (println (str "üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " (.getMessage e))))))

(println "\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û! üéâ") 