(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

(defn parse-string [input]
  (let [tokens (lexer/tokenize input)]
    (parser/parse tokens)))

(defn parse-successful? [result]
  (:success result))

(defn get-ast [result]
  (:ast result))

(println "üîç –ê–ù–ê–õ–ò–ó –ü–ê–†–°–ò–ù–ì–ê –¢–ï–õ –§–£–ù–ö–¶–ò–ô")
(println "==============================")

;; –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
(println "\n1. –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è:")
(let [result (parse-string "void test() { }")]
  (println (str "–í–≤–æ–¥: 'void test() { }'"))
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (parse-successful? result)
    (let [ast (get-ast result)]
      (println (str "AST: " ast))
      (let [func-decl (first (:declarations ast))]
        (println (str "–§—É–Ω–∫—Ü–∏—è: " func-decl))
        (println (str "–¢–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏: " (:body func-decl)))
        (println (str "–¢–∏–ø —Ç–µ–ª–∞: " (:ast-type (:body func-decl))))
        (when (:body func-decl)
          (println (str "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ —Ç–µ–ª–µ: " (:statements (:body func-decl)))))))
    (println (str "–û—à–∏–±–∫–∞: " (:error result)))))

;; –¢–µ—Å—Ç 2: –§—É–Ω–∫—Ü–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
(println "\n2. –§—É–Ω–∫—Ü–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:")
(let [result (parse-string "void test() { int x = 10; return x; }")]
  (println (str "–í–≤–æ–¥: 'void test() { int x = 10; return x; }'"))
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (parse-successful? result)
    (let [ast (get-ast result)]
      (println (str "AST: " ast))
      (let [func-decl (first (:declarations ast))]
        (println (str "–§—É–Ω–∫—Ü–∏—è: " func-decl))
        (println (str "–¢–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏: " (:body func-decl)))
        (println (str "–¢–∏–ø —Ç–µ–ª–∞: " (:ast-type (:body func-decl))))
        (when (:body func-decl)
          (println (str "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ —Ç–µ–ª–µ: " (:statements (:body func-decl))))
          (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: " (count (:statements (:body func-decl))))))))
    (println (str "–û—à–∏–±–∫–∞: " (:error result)))))

;; –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–∫–µ–Ω—ã
(println "\n3. –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤:")
(let [tokens (lexer/tokenize "void test() { int x = 10; return x; }")]
  (println (str "–¢–æ–∫–µ–Ω—ã: " tokens))
  (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: " (count tokens))))

;; –¢–µ—Å—Ç 4: –ü–æ—à–∞–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
(println "\n4. –ü–æ—à–∞–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:")
(let [code "void test() { return 42; }"
      tokens (lexer/tokenize code)]
  (println (str "–ö–æ–¥: " code))
  (println (str "–¢–æ–∫–µ–Ω—ã: " tokens))
  (let [result (parser/parse tokens)]
    (println (str "–†–µ–∑—É–ª—å—Ç–∞—Ç: " result))
    (when (:success result)
      (let [ast (:ast result)
            func-decl (first (:declarations ast))]
        (println (str "–§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é: " func-decl))))))

(println "\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω") 