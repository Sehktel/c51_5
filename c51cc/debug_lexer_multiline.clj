(require '[c51cc.lexer :as lexer])

(println "üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–ï–ö–°–ï–†–ê –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í")
(println "========================================")

;; –¢–µ—Å—Ç 1: –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–ø–æ—Å–ª–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞)
(let [code "unsigned char led_state = 0;

void delay(unsigned int ms) {
  for (unsigned int i = 0; i < ms; i++) {
  }
}

void main() {
  while (1) {
    led_state = !led_state;
    delay(1000);
  }
}"
      tokens (lexer/tokenize code)]
  (println (str "–ö–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:\n" code))
  (println (str "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: " (count tokens)))
  (println "\n–í—Å–µ —Ç–æ–∫–µ–Ω—ã:")
  (doseq [token tokens]
    (println (str "  " token))))

;; –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
(let [code "int x = 10; void main() { x = x + 1; }"
      tokens (lexer/tokenize code)]
  (println (str "\n\n–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: " code))
  (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: " (count tokens)))
  (println "–¢–æ–∫–µ–Ω—ã:")
  (doseq [token tokens]
    (println (str "  " token))))

;; –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ª–µ–∫—Å–µ—Ä)
(let [code "int x = 10; // —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
      tokens (lexer/tokenize code)]
  (println (str "\n\n–ö–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º (–ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞–¥–∞—Ç—å –≤ –ª–µ–∫—Å–µ—Ä): " code))
  (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: " (count tokens)))
  (println "–¢–æ–∫–µ–Ω—ã:")
  (doseq [token tokens]
    (println (str "  " token))))

(println "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–∫—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ") 