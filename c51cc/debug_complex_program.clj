(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

(defn parse-string [input]
  (let [tokens (lexer/tokenize input)]
    (parser/parse tokens)))

(defn parse-successful? [result]
  (:success result))

(defn get-ast [result]
  (:ast result))

(defn get-error [result]
  (:error result))

(println "üîç –û–¢–õ–ê–î–ö–ê –°–õ–û–ñ–ù–û–ô –ü–†–û–ì–†–ê–ú–ú–´")
(println "============================")

;; –¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Ç–µ—Å—Ç–∞
(let [code "int sum(int n) { int result = 0; for (int i = 1; i <= n; i++) { if (i % 2 == 0) result += i; } return result; }"
      tokens (lexer/tokenize code)]
  (println (str "–°–ª–æ–∂–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: " code))
  (println (str "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: " (count tokens)))
  
  (let [result (parse-string code)]
    (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
    (if (parse-successful? result)
      (let [ast (get-ast result)
            func-decl (first (:declarations ast))
            body (:body func-decl)]
        (println (str "–§—É–Ω–∫—Ü–∏—è: " (:name func-decl)))
        (println (str "–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–ª–µ: " (count (:statements body))))
        (doseq [i (range (count (:statements body)))]
          (let [stmt (nth (:statements body) i)]
            (println (str "  –û–ø–µ—Ä–∞—Ç–æ—Ä " (inc i) ": " (:ast-type stmt))))))
      (println (str "–û—à–∏–±–∫–∞: " (get-error result))))))

;; –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
(println "\n" (str "=" 40))
(println "–£–ü–†–û–©–ï–ù–ù–´–ï –í–ï–†–°–ò–ò:")

;; –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π for –±–µ–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
(println "\n1. –ü—Ä–æ—Å—Ç–æ–π for:")
(let [result (parse-string "void test() { for (i = 0; i < 10; i++) sum = sum + i; }")]
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (not (parse-successful? result))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))))

;; –¢–µ—Å—Ç 2: –ú–æ–¥—É–ª–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä
(println "\n2. –ú–æ–¥—É–ª–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä:")
(let [result (parse-string "void test() { x = i % 2; }")]
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (not (parse-successful? result))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))))

;; –¢–µ—Å—Ç 3: –°–æ—Å—Ç–∞–≤–Ω–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
(println "\n3. –°–æ—Å—Ç–∞–≤–Ω–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ:")
(let [result (parse-string "void test() { result += i; }")]
  (println (str "–£—Å–ø–µ—Ö: " (parse-successful? result)))
  (if (not (parse-successful? result))
    (println (str "–û—à–∏–±–∫–∞: " (get-error result)))))

(println "\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞") 