(require '[clojure.string :as str])
(require '[c51cc.preprocessor-v2 :as pp])

;; –§–ü –∫–æ–Ω–≤–µ–π–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
(defn safe-println [label text]
  (->> text str/split-lines (map #(str "  " %)) (cons label) (str/join "\n") println)
  text)

(defn run-test [test-name code options expected-contains]
  (println (str "\nüß™ " test-name))
  (try
    (let [result (pp/preprocess-v2 code options)]
      (safe-println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" (:result result))
      (println "–£—Å–ø–µ—Ö:" (:success result))
      (println "–û—à–∏–±–∫–∏:" (count (:errors result)))
      
      (if (:success result)
        (if (str/includes? (:result result) expected-contains)
          (println "‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
          (println "‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù - –æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:" expected-contains))
        (println "‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù - –µ—Å—Ç—å –æ—à–∏–±–∫–∏"))
      
      (:success result))
    (catch Exception e
      (println "‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï:" (.getMessage e))
      false)))

(println "üöÄ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ï–°–¢–û–í –î–ò–†–ï–ö–¢–ò–í–´ #INCLUDE ===")

;; –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
(spit "basic.h" "#define BASIC_VALUE 100")
(spit "nested_inner.h" "#define INNER 200")
(spit "nested_outer.h" "#include \"nested_inner.h\"\n#define OUTER INNER")
(spit "guarded.h" "#ifndef GUARDED_H\n#define GUARDED_H\n#define GUARDED_VAL 300\n#endif")

(def tests [
  ["–ü—Ä–æ—Å—Ç–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ" 
   "#include \"basic.h\"\nint x = BASIC_VALUE;" 
   "100"]
  
  ["–í–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω–∏—è" 
   "#include \"nested_outer.h\"\nint y = OUTER;" 
   "200"]
  
  ["Include guards (–¥–≤–æ–π–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ)" 
   "#include \"guarded.h\"\n#include \"guarded.h\"\nint z = GUARDED_VAL;" 
   "300"]
  
  ["–ú–∞–∫—Ä–æ—Å—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏" 
   "#include \"basic.h\"\nint calc = BASIC_VALUE * 2;" 
   "100 * 2"]
  
  ["–†–µ–∞–ª—å–Ω—ã–π C51 –∫–æ–¥" 
   "#define XTAL 11059200\n#include \"basic.h\"\nint freq = XTAL / BASIC_VALUE;" 
   "11059200 / 100"]
])

(def results 
  (for [[name code expected] tests]
    (run-test name code {:include-paths ["."]} expected)))

(println "\nüìä === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
(println "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:" (count tests))
(println "–ü—Ä–æ–π–¥–µ–Ω–æ:" (count (filter true? results)))
(println "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:" (count (filter false? results)))

(if (every? true? results)
  (println "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
  (println "\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´"))

(println "\n‚úÖ –î–∏—Ä–µ–∫—Ç–∏–≤–∞ #include —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
(println "‚úÖ Include guards —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç!")
(println "‚úÖ –í–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!")
(println "‚úÖ –ú–∞–∫—Ä–æ—Å—ã –∏–∑ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è!")
(println "‚úÖ –§–ü –∫–æ–Ω–≤–µ–π–µ—Ä —Ä–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É —Å –≤—ã–≤–æ–¥–æ–º!") 