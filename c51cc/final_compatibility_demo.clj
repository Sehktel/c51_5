(require '[c51cc.preprocessor :as pp])
(require '[c51cc.preprocessor-v2 :as pp2])

(println "üéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===")
(println)

;; ============================================================================
;; –ü–†–û–ë–õ–ï–ú–ê (–î–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø)
;; ============================================================================

(println "‚ùå –ü–†–û–ë–õ–ï–ú–ê (–±—ã–ª–∞):")
(println "‚Ä¢ v1 –≤–æ–∑–≤—Ä–∞—â–∞–ª String")
(println "‚Ä¢ v2 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {:result String, :errors [], :success Boolean}")
(println "‚Ä¢ –ù–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
(println "‚Ä¢ –°—Ç–∞—Ä—ã–π –∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º")
(println)

;; ============================================================================
;; –†–ï–®–ï–ù–ò–ï (–ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø)
;; ============================================================================

(println "‚úÖ –†–ï–®–ï–ù–ò–ï (—Å–µ–π—á–∞—Å):")
(println "‚Ä¢ –°–æ–∑–¥–∞–Ω wrapper –≤ c51cc.preprocessor")
(println "‚Ä¢ preprocess() –≤—ã–∑—ã–≤–∞–µ—Ç preprocess-v2() –≤–Ω—É—Ç—Ä–∏")
(println "‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç String –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
(println "‚Ä¢ –°—Ç–∞—Ä—ã–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô")
(println)

;; ============================================================================
;; –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø
;; ============================================================================

(def test-code 
  "#define MAX_SIZE 256
   #define DEBUG
   #ifdef DEBUG
   int debug_level = 2;
   #endif
   int buffer[MAX_SIZE];")

(println "üìù –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥:")
(println test-code)
(println)

;; –°—Ç–∞—Ä—ã–π API (—á–µ—Ä–µ–∑ wrapper)
(println "üîÑ –°—Ç–∞—Ä—ã–π API (c51cc.preprocessor/preprocess):")
(let [result (pp/preprocess test-code)]
  (println "–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:" (type result))
  (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:")
  (println result))
(println)

;; –ù–æ–≤—ã–π API (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)
(println "üÜï –ù–æ–≤—ã–π API (c51cc.preprocessor-v2/preprocess-v2):")
(let [result (pp2/preprocess-v2 test-code)]
  (println "–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:" (type result))
  (println "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
  (println "  :result ->" (pr-str (:result result)))
  (println "  :success ->" (:success result))
  (println "  :errors ->" (count (:errors result)) "–æ—à–∏–±–æ–∫"))
(println)

;; –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
(println "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
(let [old-result (pp/preprocess test-code)
      new-result (pp2/preprocess-v2 test-code)
      compatible? (= old-result (:result new-result))]
  (println "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã:" compatible?)
  (if compatible?
    (println "‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –†–ê–ë–û–¢–ê–ï–¢!")
    (println "‚ùå –ü–†–û–ë–õ–ï–ú–ê –° –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨–Æ!")))
(println)

;; ============================================================================
;; –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –†–ï–®–ï–ù–ò–Ø
;; ============================================================================

(println "üéâ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –†–ï–®–ï–ù–ò–Ø:")
(println "1. üîÑ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
(println "   ‚Ä¢ –°—Ç–∞—Ä—ã–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
(println "   ‚Ä¢ preprocess() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç String –∫–∞–∫ —Ä–∞–Ω—å—à–µ")
(println)
(println "2. üÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
(println "   ‚Ä¢ preprocess-v2() –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
(println "   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
(println "   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
(println)
(println "3. üöÄ –ì–∏–±–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è")
(println "   ‚Ä¢ –ú–æ–∂–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ")
(println "   ‚Ä¢ –ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π API")
(println)
(println "4. üîß –õ—É—á—à–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
(println "   ‚Ä¢ Transducers –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
(println "   ‚Ä¢ Protocols –¥–ª—è —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏")
(println "   ‚Ä¢ Spec –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")

(println)
(println "üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –†–ï–®–ï–ù–ê!")
(println "‚úÖ Wrapper –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ—Å—à–æ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞")
(println "‚úÖ –ù–æ–≤—ã–π API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
(println "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –∏–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤–æ–≤—Å–µ") 