;; –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ C51
;; –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä -> –õ–µ–∫—Å–µ—Ä -> –ü–∞—Ä—Å–µ—Ä -> –ö—Ä–∞—Å–∏–≤–∞—è –ø–µ—á–∞—Ç—å AST

(require '[c51cc.preprocessor :as preprocessor])
(require '[c51cc.lexer :as lexer])
(require '[c51cc.parser :as parser])
(require '[c51cc.ast :as ast])
(require '[clojure.java.io :as io])
(require '[clojure.string :as str])

;; ============================================================================
;; –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
;; ============================================================================

(defn get-test-files
  "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .c —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ test/ccode"
  []
  (let [test-dir (io/file "test/ccode")]
    (if (.exists test-dir)
      (->> (.listFiles test-dir)
           (filter #(.isFile %))
           (filter #(str/ends-with? (.getName %) ".c"))
           (map #(.getName %))
           (sort))
      [])))

(defn safe-stage
  "–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫—É"
  [stage-name f input]
  (try
    {:success? true
     :result (f input)
     :error nil}
    (catch Exception e
      {:success? false
       :result nil
       :error (str stage-name " –æ—à–∏–±–∫–∞: " (.getMessage e))})))

;; ============================================================================
;; –≠–¢–ê–ü–´ –û–ë–†–ê–ë–û–¢–ö–ò
;; ============================================================================

(defn run-preprocessor
  "–≠—Ç–∞–ø 1: –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä - —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è"
  [file-content]
  (-> file-content
      preprocessor/remove-comments
      preprocessor/normalize-whitespace))

(defn run-lexer
  "–≠—Ç–∞–ø 2: –õ–µ–∫—Å–µ—Ä - —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è"
  [clean-content]
  (lexer/tokenize clean-content))

(defn run-parser
  "–≠—Ç–∞–ø 3: –ü–∞—Ä—Å–µ—Ä - –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ AST"
  [tokens]
  (let [parse-state (parser/parse-state tokens)
        result (parser/parse-program parse-state)]
    (if (:success? result)
      (:value result)
      (throw (ex-info "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞" {:error (:error result)})))))

(defn run-ast-printer
  "–≠—Ç–∞–ø 4: –ö—Ä–∞—Å–∏–≤–∞—è –ø–µ—á–∞—Ç—å AST"
  [ast-tree]
  (ast/pretty-print ast-tree))

;; ============================================================================
;; –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
;; ============================================================================

(defn test-single-file
  "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤—Å—é —Ü–µ–ø–æ—á–∫—É"
  [file-name]
  (println (str "\nüîç –¢–µ—Å—Ç–∏—Ä—É—é —Ñ–∞–π–ª: " file-name))
  (println (str "   " (apply str (repeat (+ 15 (count file-name)) "-"))))
  
  (let [file-path (str "test/ccode/" file-name)
        file-content (slurp file-path)]
    
    ;; –≠—Ç–∞–ø 1: –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    (print "   üìù –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä... ")
    (let [preprocessor-result (safe-stage "–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä" run-preprocessor file-content)]
      (if (:success? preprocessor-result)
        (do
          (println "‚úÖ")
          
          ;; –≠—Ç–∞–ø 2: –õ–µ–∫—Å–µ—Ä
          (print "   üî§ –õ–µ–∫—Å–µ—Ä... ")
          (let [lexer-result (safe-stage "–õ–µ–∫—Å–µ—Ä" run-lexer (:result preprocessor-result))]
            (if (:success? lexer-result)
              (do
                (println "‚úÖ")
                (println (str "      –¢–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: " (count (:result lexer-result))))
                
                ;; –≠—Ç–∞–ø 3: –ü–∞—Ä—Å–µ—Ä
                (print "   üå≥ –ü–∞—Ä—Å–µ—Ä... ")
                (let [parser-result (safe-stage "–ü–∞—Ä—Å–µ—Ä" run-parser (:result lexer-result))]
                  (if (:success? parser-result)
                    (do
                      (println "‚úÖ")
                      
                      ;; –≠—Ç–∞–ø 4: AST-–ø—Ä–∏–Ω—Ç–µ—Ä
                      (print "   üé® AST-–ø—Ä–∏–Ω—Ç–µ—Ä... ")
                      (let [ast-result (safe-stage "AST-–ø—Ä–∏–Ω—Ç–µ—Ä" run-ast-printer (:result parser-result))]
                        (if (:success? ast-result)
                          (do
                            (println "‚úÖ")
                            (println "   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ –ü–û–õ–ù–´–ô –£–°–ü–ï–•")
                            {:file file-name :success? true :errors []})
                          (do
                            (println "‚ùå")
                            (println (str "      –û—à–∏–±–∫–∞: " (:error ast-result)))
                            (println "   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –û–®–ò–ë–ö–ê –ù–ê –≠–¢–ê–ü–ï AST-–ü–†–ò–ù–¢–ï–†–ê")
                            {:file file-name :success? false :errors [(:error ast-result)]}))))
                    (do
                      (println "‚ùå")
                      (println (str "      –û—à–∏–±–∫–∞: " (:error parser-result)))
                      (println "   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –û–®–ò–ë–ö–ê –ù–ê –≠–¢–ê–ü–ï –ü–ê–†–°–ï–†–ê")
                      {:file file-name :success? false :errors [(:error parser-result)]}))))
              (do
                (println "‚ùå")
                (println (str "      –û—à–∏–±–∫–∞: " (:error lexer-result)))
                (println "   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –û–®–ò–ë–ö–ê –ù–ê –≠–¢–ê–ü–ï –õ–ï–ö–°–ï–†–ê")
                {:file file-name :success? false :errors [(:error lexer-result)]}))))
        (do
          (println "‚ùå")
          (println (str "      –û—à–∏–±–∫–∞: " (:error preprocessor-result)))
          (println "   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –û–®–ò–ë–ö–ê –ù–ê –≠–¢–ê–ü–ï –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê")
          {:file file-name :success? false :errors [(:error preprocessor-result)]})))))

(defn run-all-tests
  "–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"
  []
  (println "üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¶–ï–ü–û–ß–ö–ò –ö–û–ú–ü–ò–õ–Ø–¢–û–†–ê C51")
  (println "=" (apply str (repeat 60 "=")))
  (println "–ê–≤—Ç–æ—Ä: Senior Developer | –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
  (println)
  
  (let [test-files (get-test-files)]
    (if (empty? test-files)
      (println "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ test/ccode")
      (do
        (println (str "üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: " (count test-files)))
        (println)
        
        ;; –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        (let [results (doall (map test-single-file test-files))
              successful (filter :success? results)
              failed (filter #(not (:success? %)) results)]
          
          ;; –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          (println "\n" "=" (apply str (repeat 60 "=")))
          (println "üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
          (println "=" (apply str (repeat 60 "=")))
          (println (str "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: " (count successful) "/" (count results)))
          (println (str "‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: " (count failed) "/" (count results)))
          (println (str "üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: " (format "%.1f" (* 100.0 (/ (count successful) (count results)))) "%"))
          
          ;; –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º
          (when (seq failed)
            (println "\n‚ùå –§–ê–ô–õ–´ –° –û–®–ò–ë–ö–ê–ú–ò:")
            (println "-" (apply str (repeat 58 "-")))
            (doseq [failed-test failed]
              (println (str "üìÑ " (:file failed-test)))
              (doseq [error (:errors failed-test)]
                (println (str "   üí• " error)))
              (println)))
          
          ;; –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          {:total (count results)
           :successful (count successful)
           :failed (count failed)
           :success-rate (/ (count successful) (count results))
           :results results})))))

;; ============================================================================
;; –ë–´–°–¢–†–´–ï –¢–ï–°–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
;; ============================================================================

(defn quick-test
  "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
  [file-name]
  (test-single-file file-name))

(defn test-simple-files
  "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
  []
  (println "üéØ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–´–• –§–ê–ô–õ–û–í")
  (println "=" (apply str (repeat 50 "=")))
  
  (let [simple-files ["test_01_var_decl.c" "test_02_assignment.c" "test_03_arithmetic.c"]]
    (doseq [file simple-files]
      (when (.exists (io/file (str "test/ccode/" file)))
        (quick-test file)))))

;; ============================================================================
;; –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í
;; ============================================================================

(println "üéØ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ C51 –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
(println "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
(println "  (run-all-tests)     - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
(println "  (test-simple-files) - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤")
(println "  (quick-test \"file.c\") - —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
(println) 