(require '[c51cc.parser :as parser])
(require '[c51cc.lexer :as lexer])

(println "üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¢–û–†–û–í –°–î–í–ò–ì–ê")
(println "=" (apply str (repeat 50 "=")))

(defn demo-shift-fix [code]
  (println (str "\nüìù –ö–æ–¥: " code))
  (let [tokens (lexer/tokenize code)]
    (println "üîç –¢–æ–∫–µ–Ω—ã:")
    (doseq [[i token] (map-indexed vector tokens)]
      (println (str "   " i ": " (:type token) " -> " (:value token))))
    
    (let [result (parser/parse tokens)]
      (if (:success result)
        (println "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –£–°–ü–ï–®–ï–ù!")
        (println (str "‚ùå –û—à–∏–±–∫–∞: " (:error result)))))))

;; –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
(demo-shift-fix "P1 |= (1 << 3);")
(demo-shift-fix "mask = 0xFF >> 4;")
(demo-shift-fix "value <<= 2;")
(demo-shift-fix "data >>= 1;")

(println "\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢:")
(println "‚úÖ –õ–µ–∫—Å–µ—Ä —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç:")
(println "   << –∫–∞–∫ :shift-left (–±–∏—Ç–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä)")
(println "   >> –∫–∞–∫ :shift-right (–±–∏—Ç–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä)")
(println "   <<= –∫–∞–∫ :shift-left-equal (–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è)")
(println "   >>= –∫–∞–∫ :shift-right-equal (–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è)")
(println "\n‚úÖ –ü–∞—Ä—Å–µ—Ä —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:")
(println "   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–¥–≤–∏–≥–∞")
(println "   - –°–æ—Å—Ç–∞–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è —Å–æ —Å–¥–≤–∏–≥–æ–º")
(println "   - –ë–∏—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ—Ä—Ç–∞–º–∏ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞")

(println "\nüéâ –ü–†–û–ë–õ–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê! üéâ") 