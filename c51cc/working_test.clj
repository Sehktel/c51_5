(ns working-test
  (:require [c51cc.parser :as parser]
            [c51cc.lexer :as lexer]))

(println "üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–Æ–©–ï–ì–û –ú–ê–ö–†–û–°–ê do-parse")
(println "===========================================")

;; –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —Å do-parse
(println "\n1. –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —á–∏—Å–ª–∞:")
(let [tokens (lexer/tokenize "42")
      state (parser/parse-state tokens)
      number-parser (parser/do-parse
                      num (parser/expect-token :number)
                      (parser/return-parser (:value num)))
      result (number-parser state)]
  (println "–¢–æ–∫–µ–Ω—ã:" tokens)
  (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)
  (when (:success? result)
    (println "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ —á–∏—Å–ª–æ:" (:value result))))

;; –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–µ—Ä —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
(println "\n2. –ü–∞—Ä—Å–µ—Ä —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—Å–∏–º–≤–æ–ª _):")
(let [tokens (lexer/tokenize "int x;")
      state (parser/parse-state tokens)
      var-parser (parser/do-parse
                   type-spec parser/parse-type-specifier
                   name (parser/expect-token :identifier)
                   _ (parser/expect-token-value :semicolon)
                   (parser/return-parser 
                     {:type (:base-type type-spec)
                      :name (:value name)}))
      result (var-parser state)]
  (println "–¢–æ–∫–µ–Ω—ã:" tokens)
  (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)
  (when (:success? result)
    (println "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:" (:value result))))

;; –¢–µ—Å—Ç 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–æ–≤
(println "\n3. –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞ parenthesized:")
(let [tokens (lexer/tokenize "(42)")
      state (parser/parse-state tokens)
      paren-parser (parser/parenthesized parser/parse-expression)
      result (paren-parser state)]
  (println "–¢–æ–∫–µ–Ω—ã:" tokens)
  (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)
  (when (:success? result)
    (println "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö")))

;; –¢–µ—Å—Ç 4: –ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä transform
(println "\n4. –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∞ transform:")
(let [tokens (lexer/tokenize "42")
      state (parser/parse-state tokens)
      double-parser (parser/transform 
                      parser/parse-expression
                      (fn [expr]
                        (if (= (:ast-type expr) :literal)
                          (assoc expr :value (* 2 (:value expr)))
                          expr)))
      result (double-parser state)]
  (println "–¢–æ–∫–µ–Ω—ã:" tokens)
  (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)
  (when (:success? result)
    (println "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏:" (:value (:value result)))))

;; –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
(println "\n5. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:")
(let [tokens (lexer/tokenize "int")  ; –ù–µ–ø–æ–ª–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      state (parser/parse-state tokens)
      error-parser (parser/with-error-context
                     (parser/do-parse
                       type-spec parser/parse-type-specifier
                       name (parser/expect-token :identifier)
                       (parser/return-parser {:type type-spec :name name}))
                     "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
      result (error-parser state)]
  (println "–¢–æ–∫–µ–Ω—ã:" tokens)
  (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)
  (when-not (:success? result)
    (println "‚úÖ –û—à–∏–±–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:" (:error result))))

;; –¢–µ—Å—Ç 6: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
(println "\n6. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ parse-while-statement —Å do-parse:")
(let [tokens (lexer/tokenize "while (x) { }")
      state (parser/parse-state tokens)
      while-parser (parser/do-parse
                     _ (parser/expect-token-value :while)
                     _ (parser/expect-token-value :open-round)
                     condition parser/parse-expression
                     _ (parser/expect-token-value :close-round)
                     body parser/parse-statement
                     (parser/return-parser 
                       (parser/while-statement-node condition body)))
      result (while-parser state)]
  (println "–¢–æ–∫–µ–Ω—ã:" tokens)
  (println "–†–µ–∑—É–ª—å—Ç–∞—Ç:" result)
  (when (:success? result)
    (println "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ while —Å do-parse")))

(println "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
(println "–ú–∞–∫—Ä–æ—Å do-parse —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç!") 