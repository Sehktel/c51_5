;; –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å test_25_singleton_guard.c
;; –ê–≤—Ç–æ—Ä: Senior Developer

(require '[c51cc.preprocessor :as preprocessor])
(require '[c51cc.lexer :as lexer])
(require '[c51cc.parser :as parser])
(require '[clojure.pprint :as pprint])

(defn debug-test-25 []
  (println "üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê test_25_singleton_guard.c")
  (println "=" (apply str (repeat 60 "=")))
  
  (let [file-content (slurp "c51cc/test/ccode/test_25_singleton_guard.c")]
    
    ;; –®–∞–≥ 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
    (println "\nüìÑ –ò–°–•–û–î–ù–´–ô –ö–û–î:")
    (println "-" (apply str (repeat 58 "-")))
    (println file-content)
    
    ;; –®–∞–≥ 2: –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    (println "\nüìù –ü–û–°–õ–ï –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê:")
    (println "-" (apply str (repeat 58 "-")))
    (let [clean-content (-> file-content
                           preprocessor/remove-comments
                           preprocessor/normalize-whitespace)]
      (println clean-content)
      
      ;; –®–∞–≥ 3: –¢–æ–∫–µ–Ω—ã
      (println "\nüî§ –¢–û–ö–ï–ù–´:")
      (println "-" (apply str (repeat 58 "-")))
      (let [tokens (lexer/tokenize clean-content)]
        (println (str "–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: " (count tokens)))
        (doseq [[i token] (map-indexed vector tokens)]
          (println (format "%2d: %s" (inc i) token)))
        
        ;; –®–∞–≥ 4: –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        (println "\nüå≥ –ü–ê–†–°–ò–ù–ì:")
        (println "-" (apply str (repeat 58 "-")))
        (try
          (let [parse-state (parser/parse-state tokens)]
            (println "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞:")
            (pprint/pprint (select-keys parse-state [:position :tokens-count]))
            
            (let [result (parser/parse-program parse-state)]
              (println "\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
              (if (:success? result)
                (do
                  (println "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω")
                  (println "AST:")
                  (pprint/pprint (:value result)))
                (do
                  (println "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
                  (pprint/pprint (:error result))))))
          (catch Exception e
            (println "üí• –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:")
            (println (.getMessage e))
            (.printStackTrace e)))))))

;; –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
(debug-test-25) 